
emu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000100c  000010a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000100c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  00800142  00800142  000010e2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005826  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bed  00000000  00000000  00006c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fac  00000000  00000000  000087f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000798  00000000  00000000  0000b7a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fd2  00000000  00000000  0000bf3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003106  00000000  00000000  0000df0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00011014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	37 c1       	rjmp	.+622    	; 0x270 <__ctors_end>
       2:	00 00       	nop
       4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ab c5       	rjmp	.+2902   	; 0xb80 <__vector_10>
      2a:	00 00       	nop
      2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c1       	rjmp	.+604    	; 0x2c2 <__vector_25>
      66:	00 00       	nop
      68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c c1       	rjmp	.+536    	; 0x2a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0a c1       	rjmp	.+532    	; 0x2a6 <__bad_interrupt>
      92:	00 00       	nop
      94:	08 c1       	rjmp	.+528    	; 0x2a6 <__bad_interrupt>
      96:	00 00       	nop
      98:	06 c1       	rjmp	.+524    	; 0x2a6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	04 c1       	rjmp	.+520    	; 0x2a6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	02 c1       	rjmp	.+516    	; 0x2a6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	00 c1       	rjmp	.+512    	; 0x2a6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	fe c0       	rjmp	.+508    	; 0x2a6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ad 06       	cpc	r10, r29
      ae:	cf 06       	cpc	r12, r31
      b0:	bb 07       	cpc	r27, r27
      b2:	cf 06       	cpc	r12, r31
      b4:	bb 07       	cpc	r27, r27
      b6:	14 07       	cpc	r17, r20
      b8:	36 07       	cpc	r19, r22
      ba:	bb 07       	cpc	r27, r27
      bc:	88 07       	cpc	r24, r24
      be:	9a 07       	cpc	r25, r26

000000c0 <__trampolines_end>:
      c0:	28 00       	.word	0x0028	; ????
      c2:	00 00       	nop
      c4:	00 01       	movw	r0, r0
      c6:	04 00       	.word	0x0004	; ????
      c8:	01 00       	.word	0x0001	; ????
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 01       	movw	r0, r0
      d2:	58 47       	sbci	r21, 0x78	; 120
      d4:	49 50       	subi	r20, 0x09	; 9
      d6:	31 30       	cpi	r19, 0x01	; 1
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	00 00       	nop

000000e8 <SerialString>:
      e8:	1a 03 37 00 45 00 45 00 44 00 38 00 31 00 34 00     ..7.E.E.D.8.1.4.
      f8:	30 00 31 00 35 00 35 00 35 00 00 00                 0.1.5.5.5...

00000104 <ProductString>:
     104:	16 03 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00     ..C.o.n.t.r.o.l.
     114:	6c 00 65 00 72 00 00 00                             l.e.r...

0000011c <ManufacturerString>:
     11c:	14 03 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00     ..M.i.c.r.o.s.o.
     12c:	66 00 74 00 00 00                                   f.t...

00000132 <LanguageString>:
     132:	04 03 09 04                                         ....

00000136 <ModString>:
     136:	12 03 4d 00 53 00 46 00 54 00 31 00 30 00 30 00     ..M.S.F.T.1.0.0.
     146:	90 00 00 00                                         ....

0000014a <XboxString>:
     14a:	b2 03 58 00 62 00 6f 00 78 00 20 00 53 00 65 00     ..X.b.o.x. .S.e.
     15a:	63 00 75 00 72 00 69 00 74 00 79 00 20 00 4d 00     c.u.r.i.t.y. .M.
     16a:	65 00 74 00 68 00 6f 00 64 00 20 00 33 00 2c 00     e.t.h.o.d. .3.,.
     17a:	20 00 56 00 65 00 72 00 73 00 69 00 6f 00 6e 00      .V.e.r.s.i.o.n.
     18a:	20 00 31 00 2e 00 30 00 30 00 2c 00 20 00 a9 00      .1...0.0.,. ...
     19a:	20 00 32 00 30 00 30 00 35 00 20 00 4d 00 69 00      .2.0.0.5. .M.i.
     1aa:	63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00     c.r.o.s.o.f.t. .
     1ba:	43 00 6f 00 72 00 70 00 6f 00 72 00 61 00 74 00     C.o.r.p.o.r.a.t.
     1ca:	69 00 6f 00 6e 00 2e 00 20 00 41 00 6c 00 6c 00     i.o.n... .A.l.l.
     1da:	20 00 72 00 69 00 67 00 68 00 74 00 73 00 20 00      .r.i.g.h.t.s. .
     1ea:	72 00 65 00 73 00 65 00 72 00 76 00 65 00 64 00     r.e.s.e.r.v.e.d.
     1fa:	2e 00 00 00                                         ....

000001fe <ConfigurationDescriptor>:
     1fe:	09 02 60 00 03 01 00 a0 fa 09 04 00 00 02 ff 47     ..`............G
     20e:	d0 00 07 05 02 03 40 00 04 07 05 82 03 40 00 04     ......@......@..
     21e:	09 04 01 00 00 ff 47 d0 00 09 04 01 01 02 ff 47     ......G........G
     22e:	d0 00 07 05 03 01 e4 00 01 07 05 83 01 40 00 01     .............@..
     23e:	09 04 02 00 00 ff 47 d0 00 09 04 02 01 02 ff 47     ......G........G
     24e:	d0 00 07 05 04 02 40 00 00 07 05 84 02 40 00 00     ......@......@..

0000025e <DeviceDescriptor>:
     25e:	12 01 00 02 ff 47 d0 40 5e 04 ea 02 01 02 01 02     .....G.@^.......
     26e:	03 01                                               ..

00000270 <__ctors_end>:
     270:	11 24       	eor	r1, r1
     272:	1f be       	out	0x3f, r1	; 63
     274:	cf ef       	ldi	r28, 0xFF	; 255
     276:	da e0       	ldi	r29, 0x0A	; 10
     278:	de bf       	out	0x3e, r29	; 62
     27a:	cd bf       	out	0x3d, r28	; 61

0000027c <__do_copy_data>:
     27c:	11 e0       	ldi	r17, 0x01	; 1
     27e:	a0 e0       	ldi	r26, 0x00	; 0
     280:	b1 e0       	ldi	r27, 0x01	; 1
     282:	ec e0       	ldi	r30, 0x0C	; 12
     284:	f0 e1       	ldi	r31, 0x10	; 16
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x10>
     288:	05 90       	lpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a2 34       	cpi	r26, 0x42	; 66
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0xc>

00000292 <__do_clear_bss>:
     292:	21 e0       	ldi	r18, 0x01	; 1
     294:	a2 e4       	ldi	r26, 0x42	; 66
     296:	b1 e0       	ldi	r27, 0x01	; 1
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	aa 3d       	cpi	r26, 0xDA	; 218
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	d0 d1       	rcall	.+928    	; 0x644 <main>
     2a4:	b1 c6       	rjmp	.+3426   	; 0x1008 <_exit>

000002a6 <__bad_interrupt>:
     2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <forceHardReset>:
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				#if (BOARD == BOARD_TEENSY2)
				PORTD |=  LEDMask;
     2a8:	5e 9a       	sbi	0x0b, 6	; 11
static volatile unsigned char spoof_initialized = BYTE_STATUS_NSPOOFED;

void forceHardReset(void)
{
  LEDs_TurnOnLEDs(LEDS_ALL_LEDS);
  cli(); // disable interrupts
     2aa:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     2ac:	98 e0       	ldi	r25, 0x08	; 8
     2ae:	88 e1       	ldi	r24, 0x18	; 24
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	a8 95       	wdr
     2b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <forceHardReset+0x18>

000002c2 <__vector_25>:
}

static unsigned char buf[MAX_CONTROL_TRANSFER_SIZE];

ISR(USART1_RX_vect)
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	2f 93       	push	r18
     2ce:	3f 93       	push	r19
     2d0:	4f 93       	push	r20
     2d2:	5f 93       	push	r21
     2d4:	6f 93       	push	r22
     2d6:	7f 93       	push	r23
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	ef 93       	push	r30
     2e2:	ff 93       	push	r31
  packet_type = UDR1;
     2e4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2e8:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <packet_type>
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
     2ec:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  while(1); // wait for watchdog to reset processor
}

static inline int16_t Serial_BlockingReceiveByte(void)
{
  while(!Serial_IsCharReceived());
     2f0:	87 ff       	sbrs	r24, 7
     2f2:	fc cf       	rjmp	.-8      	; 0x2ec <__vector_25+0x2a>
  return UDR1;
     2f4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
static unsigned char buf[MAX_CONTROL_TRANSFER_SIZE];

ISR(USART1_RX_vect)
{
  packet_type = UDR1;
  value_len = Serial_BlockingReceiveByte();
     2f8:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <value_len>
  if(packet_type == BYTE_IN_REPORT)
     2fc:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <packet_type>
     300:	8f 3f       	cpi	r24, 0xFF	; 255
     302:	19 f4       	brne	.+6      	; 0x30a <__vector_25+0x48>
  {
    pdata = report;
     304:	8d e8       	ldi	r24, 0x8D	; 141
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	02 c0       	rjmp	.+4      	; 0x30e <__vector_25+0x4c>
  }
  else
  {
    pdata = buf;
     30a:	82 e4       	ldi	r24, 0x42	; 66
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <pdata+0x1>
     312:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <pdata>
  }
  while(i < value_len)
  {
    pdata[i++] = Serial_BlockingReceiveByte();
     316:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <pdata>
     31a:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <pdata+0x1>
  }
  else
  {
    pdata = buf;
  }
  while(i < value_len)
     31e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <i>
     322:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <value_len>
     326:	89 17       	cp	r24, r25
     328:	78 f4       	brcc	.+30     	; 0x348 <__vector_25+0x86>
  {
    pdata[i++] = Serial_BlockingReceiveByte();
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	98 0f       	add	r25, r24
     32e:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <i>
     332:	f9 01       	movw	r30, r18
     334:	e8 0f       	add	r30, r24
     336:	f1 1d       	adc	r31, r1
     338:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  while(1); // wait for watchdog to reset processor
}

static inline int16_t Serial_BlockingReceiveByte(void)
{
  while(!Serial_IsCharReceived());
     33c:	87 ff       	sbrs	r24, 7
     33e:	fc cf       	rjmp	.-8      	; 0x338 <__vector_25+0x76>
  return UDR1;
     340:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  {
    pdata = buf;
  }
  while(i < value_len)
  {
    pdata[i++] = Serial_BlockingReceiveByte();
     344:	80 83       	st	Z, r24
     346:	eb cf       	rjmp	.-42     	; 0x31e <__vector_25+0x5c>
  }
  i = 0;
     348:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <i>
  Serial_SendData(&USB_ControlRequest, sizeof(USB_ControlRequest));
}

static inline void handle_packet(void)
{
  switch(packet_type)
     34c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <packet_type>
     350:	83 33       	cpi	r24, 0x33	; 51
     352:	09 f4       	brne	.+2      	; 0x356 <__vector_25+0x94>
     354:	42 c0       	rjmp	.+132    	; 0x3da <__vector_25+0x118>
     356:	28 f4       	brcc	.+10     	; 0x362 <__vector_25+0xa0>
     358:	81 31       	cpi	r24, 0x11	; 17
     35a:	a1 f0       	breq	.+40     	; 0x384 <__vector_25+0xc2>
     35c:	82 32       	cpi	r24, 0x22	; 34
     35e:	31 f1       	breq	.+76     	; 0x3ac <__vector_25+0xea>
     360:	5e c0       	rjmp	.+188    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     362:	85 35       	cpi	r24, 0x55	; 85
     364:	09 f4       	brne	.+2      	; 0x368 <__vector_25+0xa6>
     366:	53 c0       	rjmp	.+166    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     368:	8f 3f       	cpi	r24, 0xFF	; 255
     36a:	09 f4       	brne	.+2      	; 0x36e <__vector_25+0xac>
     36c:	51 c0       	rjmp	.+162    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     36e:	84 34       	cpi	r24, 0x44	; 68
     370:	09 f0       	breq	.+2      	; 0x374 <__vector_25+0xb2>
     372:	55 c0       	rjmp	.+170    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
      Serial_SendByte(BYTE_LEN_1_BYTE);
      Serial_SendByte(spoof_initialized);
      started = 1;
      break;
    case BYTE_CONTROL_DATA:
      spoofReply = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <spoofReply>
      spoofReplyLen = value_len;
     37a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <value_len>
     37e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <spoofReplyLen>
     382:	4d c0       	rjmp	.+154    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     384:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     388:	85 ff       	sbrs	r24, 5
     38a:	fc cf       	rjmp	.-8      	; 0x384 <__vector_25+0xc2>
				UDR1 = DataByte;
     38c:	81 e1       	ldi	r24, 0x11	; 17
     38e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     392:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     396:	85 ff       	sbrs	r24, 5
     398:	fc cf       	rjmp	.-8      	; 0x392 <__vector_25+0xd0>
				UDR1 = DataByte;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3a0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3a4:	85 ff       	sbrs	r24, 5
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <__vector_25+0xde>
				UDR1 = DataByte;
     3a8:	86 e0       	ldi	r24, 0x06	; 6
     3aa:	14 c0       	rjmp	.+40     	; 0x3d4 <__vector_25+0x112>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3ac:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3b0:	85 ff       	sbrs	r24, 5
     3b2:	fc cf       	rjmp	.-8      	; 0x3ac <__vector_25+0xea>
				UDR1 = DataByte;
     3b4:	82 e2       	ldi	r24, 0x22	; 34
     3b6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3ba:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3be:	85 ff       	sbrs	r24, 5
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <__vector_25+0xf8>
				UDR1 = DataByte;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
      Serial_SendByte(BYTE_TYPE_XBOXONE);
      break;
    case BYTE_STATUS:
      Serial_SendByte(BYTE_STATUS);
      Serial_SendByte(BYTE_LEN_1_BYTE);
      Serial_SendByte(spoof_initialized);
     3c8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <spoof_initialized>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3cc:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3d0:	95 ff       	sbrs	r25, 5
     3d2:	fc cf       	rjmp	.-8      	; 0x3cc <__vector_25+0x10a>
				UDR1 = DataByte;
     3d4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     3d8:	22 c0       	rjmp	.+68     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3da:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3de:	85 ff       	sbrs	r24, 5
     3e0:	fc cf       	rjmp	.-8      	; 0x3da <__vector_25+0x118>
				UDR1 = DataByte;
     3e2:	83 e3       	ldi	r24, 0x33	; 51
     3e4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3ec:	85 ff       	sbrs	r24, 5
     3ee:	fc cf       	rjmp	.-8      	; 0x3e8 <__vector_25+0x126>
				UDR1 = DataByte;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
      break;
    case BYTE_START:
      Serial_SendByte(BYTE_START);
      Serial_SendByte(BYTE_LEN_1_BYTE);
      Serial_SendByte(spoof_initialized);
     3f6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <spoof_initialized>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3fa:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3fe:	95 ff       	sbrs	r25, 5
     400:	fc cf       	rjmp	.-8      	; 0x3fa <__vector_25+0x138>
				UDR1 = DataByte;
     402:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
      started = 1;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <started>
     40c:	08 c0       	rjmp	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
    case BYTE_CONTROL_DATA:
      spoofReply = 1;
      spoofReplyLen = value_len;
      break;
    case BYTE_RESET:
      forceHardReset();
     40e:	4c df       	rcall	.-360    	; 0x2a8 <forceHardReset>
      break;
    case BYTE_IN_REPORT:
      sendReport = 1;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <sendReport>
      reportLen = value_len;
     416:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <value_len>
     41a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <reportLen>
  {
    pdata[i++] = Serial_BlockingReceiveByte();
  }
  i = 0;
  handle_packet();
}
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	5f 91       	pop	r21
     430:	4f 91       	pop	r20
     432:	3f 91       	pop	r19
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <serial_init>:
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     448:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     44c:	86 e0       	ldi	r24, 0x06	; 6
     44e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     452:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     456:	e9 ec       	ldi	r30, 0xC9	; 201
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	88 e1       	ldi	r24, 0x18	; 24
     45c:	80 83       	st	Z, r24

				DDRD  |= (1 << 3);
     45e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     460:	5a 9a       	sbi	0x0b, 2	; 11

void serial_init(void)
{
  Serial_Init(USART_BAUDRATE, USART_DOUBLE_SPEED);

  UCSR1B |= (1 << RXCIE1); // Enable the USART Receive Complete interrupt (USART_RXC)
     462:	80 81       	ld	r24, Z
     464:	80 68       	ori	r24, 0x80	; 128
     466:	80 83       	st	Z, r24
     468:	08 95       	ret

0000046a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
  /* Disable watchdog */
  MCUSR = 0;
     46a:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	a8 95       	wdr
     472:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     476:	88 61       	ori	r24, 0x18	; 24
     478:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     47c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     480:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	80 e8       	ldi	r24, 0x80	; 128
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     48e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     492:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  /* Disable clock division */
  clock_prescale_set(clock_div_1);

  serial_init();
     494:	d5 df       	rcall	.-86     	; 0x440 <serial_init>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     496:	78 94       	sei

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     498:	56 9a       	sbi	0x0a, 6	; 10

				#if (BOARD == BOARD_TEENSY2)
				PORTD &= ~LEDS_ALL_LEDS;
     49a:	5e 98       	cbi	0x0b, 6	; 11
  GlobalInterruptEnable();

  /* Hardware Initialization */
  LEDs_Init();

  while(!started);
     49c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <started>
     4a0:	88 23       	and	r24, r24

  USB_Init();
     4a2:	e1 f3       	breq	.-8      	; 0x49c <SetupHardware+0x32>
     4a4:	50 c3       	rjmp	.+1696   	; 0xb46 <USB_Init>

000004a6 <EVENT_USB_Device_Connect>:
     4a6:	08 95       	ret

000004a8 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs.
 */
void EVENT_USB_Device_Disconnect(void)
{
     4a8:	08 95       	ret

000004aa <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     4aa:	42 e3       	ldi	r20, 0x32	; 50
     4ac:	61 ec       	ldi	r22, 0xC1	; 193
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	83 d2       	rcall	.+1286   	; 0x9b8 <Endpoint_ConfigureEndpoint_Prv>
     4b2:	42 e3       	ldi	r20, 0x32	; 50
     4b4:	60 ec       	ldi	r22, 0xC0	; 192
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	7f c2       	rjmp	.+1278   	; 0x9b8 <Endpoint_ConfigureEndpoint_Prv>

000004ba <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	1f 92       	push	r1
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
  unsigned char leds = 0;

  if(USB_ControlRequest.bmRequestType & REQTYPE_VENDOR)
     4c4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>
     4c8:	86 ff       	sbrs	r24, 6
     4ca:	2b c0       	rjmp	.+86     	; 0x522 <EVENT_USB_Device_ControlRequest+0x68>
  {
    if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     4cc:	87 ff       	sbrs	r24, 7
     4ce:	4d c0       	rjmp	.+154    	; 0x56a <EVENT_USB_Device_ControlRequest+0xb0>
    {
      if(USB_ControlRequest.bRequest == 144)
     4d0:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <USB_ControlRequest+0x1>
     4d4:	90 39       	cpi	r25, 0x90	; 144
     4d6:	09 f0       	breq	.+2      	; 0x4da <EVENT_USB_Device_ControlRequest+0x20>
     4d8:	48 c0       	rjmp	.+144    	; 0x56a <EVENT_USB_Device_ControlRequest+0xb0>
      {
        unsigned char recipient = USB_ControlRequest.bmRequestType & 0x1F;
     4da:	8f 71       	andi	r24, 0x1F	; 31
        if(recipient == REQREC_DEVICE)
     4dc:	a1 f4       	brne	.+40     	; 0x506 <EVENT_USB_Device_ControlRequest+0x4c>
        {
          if(USB_ControlRequest.wIndex == 0x0004)
     4de:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     4e2:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <USB_ControlRequest+0x5>
     4e6:	04 97       	sbiw	r24, 0x04	; 4
     4e8:	09 f0       	breq	.+2      	; 0x4ec <EVENT_USB_Device_ControlRequest+0x32>
     4ea:	3f c0       	rjmp	.+126    	; 0x56a <EVENT_USB_Device_ControlRequest+0xb0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     4ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4f0:	87 7f       	andi	r24, 0xF7	; 247
     4f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
          {
            Endpoint_ClearSETUP();
            Endpoint_Write_Control_PStream_LE(request144_index_4, USB_ControlRequest.wLength);
     4f6:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x6>
     4fa:	70 91 d9 01 	lds	r23, 0x01D9	; 0x8001d9 <USB_ControlRequest+0x7>
     4fe:	80 ec       	ldi	r24, 0xC0	; 192
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	f8 d1       	rcall	.+1008   	; 0x8f4 <Endpoint_Write_Control_PStream_LE>
     504:	21 c0       	rjmp	.+66     	; 0x548 <EVENT_USB_Device_ControlRequest+0x8e>
          else
          {
            leds = 1;
          }
        }
        else if(recipient == REQREC_INTERFACE)
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	81 f5       	brne	.+96     	; 0x56a <EVENT_USB_Device_ControlRequest+0xb0>
        {
          if(USB_ControlRequest.wIndex == 0x0005)
     50a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     50e:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <USB_ControlRequest+0x5>
     512:	05 97       	sbiw	r24, 0x05	; 5
     514:	51 f5       	brne	.+84     	; 0x56a <EVENT_USB_Device_ControlRequest+0xb0>
     516:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     51a:	87 7f       	andi	r24, 0xF7	; 247
     51c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     520:	13 c0       	rjmp	.+38     	; 0x548 <EVENT_USB_Device_ControlRequest+0x8e>
      leds = 1;
    }
  }
  else
  {
    if(USB_ControlRequest.bmRequestType & REQREC_INTERFACE)
     522:	80 ff       	sbrs	r24, 0
     524:	23 c0       	rjmp	.+70     	; 0x56c <EVENT_USB_Device_ControlRequest+0xb2>
     526:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <USB_ControlRequest+0x1>
    {
      if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     52a:	87 ff       	sbrs	r24, 7
     52c:	11 c0       	rjmp	.+34     	; 0x550 <EVENT_USB_Device_ControlRequest+0x96>
      {
        if(USB_ControlRequest.bRequest == REQ_GetInterface)
     52e:	9a 30       	cpi	r25, 0x0A	; 10
     530:	e1 f4       	brne	.+56     	; 0x56a <EVENT_USB_Device_ControlRequest+0xb0>
        {
          unsigned char data[1] = { 0x00 };
     532:	19 82       	std	Y+1, r1	; 0x01
     534:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     538:	87 7f       	andi	r24, 0xF7	; 247
     53a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
          Endpoint_ClearSETUP();
          Endpoint_Write_Control_Stream_LE(data, sizeof(data));
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	ce 01       	movw	r24, r28
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	75 d1       	rcall	.+746    	; 0x832 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     548:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     54c:	8b 77       	andi	r24, 0x7B	; 123
     54e:	0a c0       	rjmp	.+20     	; 0x564 <EVENT_USB_Device_ControlRequest+0xaa>
          leds = 1;
        }
      }
      else
      {
        if(USB_ControlRequest.bRequest == REQ_SetInterface)
     550:	9b 30       	cpi	r25, 0x0B	; 11
     552:	59 f4       	brne	.+22     	; 0x56a <EVENT_USB_Device_ControlRequest+0xb0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     554:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     558:	87 7f       	andi	r24, 0xF7	; 247
     55a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     55e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     562:	8e 77       	andi	r24, 0x7E	; 126
     564:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     568:	01 c0       	rjmp	.+2      	; 0x56c <EVENT_USB_Device_ControlRequest+0xb2>
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				#if (BOARD == BOARD_TEENSY2)
				PORTD |=  LEDMask;
     56a:	5e 9a       	sbi	0x0b, 6	; 11
  }
  if(leds)
  {
    LEDs_TurnOnLEDs(LEDS_ALL_LEDS);
  }
}
     56c:	0f 90       	pop	r0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <SendNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
void SendNextReport(void)
{
  /* Select the IN Report Endpoint */
	Endpoint_SelectEndpoint(I00_IN_EPNUM);

  if (sendReport)
     57a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sendReport>
     57e:	88 23       	and	r24, r24
     580:	99 f0       	breq	.+38     	; 0x5a8 <SendNextReport+0x34>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     582:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
  {
    /* Wait until the host is ready to accept another packet */
    while (!Endpoint_IsINReady()) {}
     586:	80 ff       	sbrs	r24, 0
     588:	fc cf       	rjmp	.-8      	; 0x582 <SendNextReport+0xe>

    /* Write IN Report Data */
    Endpoint_Write_Stream_LE(report, reportLen, NULL);
     58a:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <reportLen>
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	8d e8       	ldi	r24, 0x8D	; 141
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	b8 d0       	rcall	.+368    	; 0x70a <Endpoint_Write_Stream_LE>

    sendReport = 0;
     59a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <sendReport>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     59e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5a2:	8e 77       	andi	r24, 0x7E	; 126
     5a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5a8:	08 95       	ret

000005aa <ReceiveNextReport>:
  }
}

/** Reads the next OUT report from the host from the OUT endpoint, if one has been sent. */
void ReceiveNextReport(void)
{
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <ReceiveNextReport+0x6>
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
      unsigned char length;
    } header;
    unsigned char buffer[INTERRUPT_EPSIZE];
  } packet = { .header.type = BYTE_OUT_REPORT };

  uint16_t length = 0;
     5b4:	1a 82       	std	Y+2, r1	; 0x02
     5b6:	19 82       	std	Y+1, r1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

  /* Select the OUT Report Endpoint */
	Endpoint_SelectEndpoint(I00_OUT_EPNUM);

  /* Check if OUT Endpoint contains a packet */
  if (Endpoint_IsOUTReceived())
     5c2:	82 ff       	sbrs	r24, 2
     5c4:	33 c0       	rjmp	.+102    	; 0x62c <ReceiveNextReport+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
  {
    /* Check to see if the packet contains data */
    if (Endpoint_IsReadWriteAllowed())
     5ca:	85 ff       	sbrs	r24, 5
     5cc:	0e c0       	rjmp	.+28     	; 0x5ea <ReceiveNextReport+0x40>
    {
		  /* Read OUT Report Data */
		  uint8_t ErrorCode = Endpoint_Read_Stream_LE(packet.buffer, sizeof(packet.buffer), &length);
     5ce:	ae 01       	movw	r20, r28
     5d0:	4f 5f       	subi	r20, 0xFF	; 255
     5d2:	5f 4f       	sbci	r21, 0xFF	; 255
     5d4:	60 e4       	ldi	r22, 0x40	; 64
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	e0 d0       	rcall	.+448    	; 0x79e <Endpoint_Read_Stream_LE>
		  if(ErrorCode == ENDPOINT_RWSTREAM_NoError)
     5de:	81 11       	cpse	r24, r1
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <ReceiveNextReport+0x40>
		  {
		    length = sizeof(packet.buffer);
     5e2:	80 e4       	ldi	r24, 0x40	; 64
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	9a 83       	std	Y+2, r25	; 0x02
     5e8:	89 83       	std	Y+1, r24	; 0x01
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5ee:	8b 77       	andi	r24, 0x7B	; 123
     5f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    /* Handshake the OUT Endpoint - clear endpoint and ready for next report */
    Endpoint_ClearOUT();

		if(length)
     5f4:	69 81       	ldd	r22, Y+1	; 0x01
     5f6:	7a 81       	ldd	r23, Y+2	; 0x02
     5f8:	61 15       	cp	r22, r1
     5fa:	71 05       	cpc	r23, r1
     5fc:	b9 f0       	breq	.+46     	; 0x62c <ReceiveNextReport+0x82>
		{
      packet.header.length = length & 0xFF;
     5fe:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <__data_start+0x1>
      Serial_SendData(&packet, sizeof(packet.header) + packet.header.length);
     602:	77 27       	eor	r23, r23
     604:	6e 5f       	subi	r22, 0xFE	; 254
     606:	7f 4f       	sbci	r23, 0xFF	; 255
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	e7 d4       	rcall	.+2510   	; 0xfdc <Serial_SendData>

      if(!spoof_initialized && packet.buffer[0] == 0x06 && packet.buffer[1] == 0x20)
     60e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <spoof_initialized>
     612:	81 11       	cpse	r24, r1
     614:	0b c0       	rjmp	.+22     	; 0x62c <ReceiveNextReport+0x82>
     616:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     61a:	86 30       	cpi	r24, 0x06	; 6
     61c:	39 f4       	brne	.+14     	; 0x62c <ReceiveNextReport+0x82>
     61e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
     622:	80 32       	cpi	r24, 0x20	; 32
     624:	19 f4       	brne	.+6      	; 0x62c <ReceiveNextReport+0x82>
      {
        spoof_initialized = 1;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <spoof_initialized>
      }
		}
  }
}
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <HID_Task>:

/** Function to manage HID report generation and transmission to the host, when in report mode. */
void HID_Task(void)
{
  /* Device must be connected and configured for the task to run */
  if (USB_DeviceState != DEVICE_STATE_Configured)
     636:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     63a:	84 30       	cpi	r24, 0x04	; 4
     63c:	11 f4       	brne	.+4      	; 0x642 <HID_Task+0xc>
    return;

  /* Send the next keypress report to the host */
  SendNextReport();
     63e:	9a df       	rcall	.-204    	; 0x574 <SendNextReport>

  /* Process the LED report sent from the host */
  ReceiveNextReport();
     640:	b4 cf       	rjmp	.-152    	; 0x5aa <ReceiveNextReport>
     642:	08 95       	ret

00000644 <main>:
     644:	12 df       	rcall	.-476    	; 0x46a <SetupHardware>
{
  SetupHardware();

  for (;;)
  {
    HID_Task();
     646:	f7 df       	rcall	.-18     	; 0x636 <HID_Task>
    USB_USBTask();
     648:	af d4       	rcall	.+2398   	; 0xfa8 <USB_USBTask>
     64a:	fd cf       	rjmp	.-6      	; 0x646 <main+0x2>

0000064c <CALLBACK_USB_GetDescriptor>:
     64c:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     64e:	33 27       	eor	r19, r19
     650:	22 30       	cpi	r18, 0x02	; 2
     652:	31 05       	cpc	r19, r1
     654:	61 f0       	breq	.+24     	; 0x66e <CALLBACK_USB_GetDescriptor+0x22>
     656:	23 30       	cpi	r18, 0x03	; 3
     658:	31 05       	cpc	r19, r1
     65a:	71 f0       	breq	.+28     	; 0x678 <CALLBACK_USB_GetDescriptor+0x2c>
     65c:	21 30       	cpi	r18, 0x01	; 1
     65e:	31 05       	cpc	r19, r1
     660:	09 f0       	breq	.+2      	; 0x664 <CALLBACK_USB_GetDescriptor+0x18>
     662:	4b c0       	rjmp	.+150    	; 0x6fa <CALLBACK_USB_GetDescriptor+0xae>
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     664:	82 e1       	ldi	r24, 0x12	; 18
     666:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
     668:	2e e5       	ldi	r18, 0x5E	; 94
     66a:	32 e0       	ldi	r19, 0x02	; 2
     66c:	4a c0       	rjmp	.+148    	; 0x702 <CALLBACK_USB_GetDescriptor+0xb6>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     66e:	80 e6       	ldi	r24, 0x60	; 96
     670:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
     672:	2e ef       	ldi	r18, 0xFE	; 254
     674:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     676:	45 c0       	rjmp	.+138    	; 0x702 <CALLBACK_USB_GetDescriptor+0xb6>
		case DTYPE_String: 
			switch (DescriptorNumber)
     678:	99 27       	eor	r25, r25
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	91 05       	cpc	r25, r1
     67e:	29 f1       	breq	.+74     	; 0x6ca <CALLBACK_USB_GetDescriptor+0x7e>
     680:	68 f4       	brcc	.+26     	; 0x69c <CALLBACK_USB_GetDescriptor+0x50>
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	d1 f0       	breq	.+52     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x6e>
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	09 f0       	breq	.+2      	; 0x68c <CALLBACK_USB_GetDescriptor+0x40>
     68a:	37 c0       	rjmp	.+110    	; 0x6fa <CALLBACK_USB_GetDescriptor+0xae>
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01:
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     68c:	ec e1       	ldi	r30, 0x1C	; 28
     68e:	f1 e0       	ldi	r31, 0x01	; 1
     690:	e4 91       	lpm	r30, Z
     692:	8e 2f       	mov	r24, r30
     694:	90 e0       	ldi	r25, 0x00	; 0
				case 0x00:
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01:
					Address = (void*)&ManufacturerString;
     696:	2c e1       	ldi	r18, 0x1C	; 28
     698:	31 e0       	ldi	r19, 0x01	; 1
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     69a:	33 c0       	rjmp	.+102    	; 0x702 <CALLBACK_USB_GetDescriptor+0xb6>
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
     69c:	84 30       	cpi	r24, 0x04	; 4
     69e:	91 05       	cpc	r25, r1
     6a0:	21 f1       	breq	.+72     	; 0x6ea <CALLBACK_USB_GetDescriptor+0x9e>
     6a2:	d8 f0       	brcs	.+54     	; 0x6da <CALLBACK_USB_GetDescriptor+0x8e>
     6a4:	8e 3e       	cpi	r24, 0xEE	; 238
     6a6:	91 05       	cpc	r25, r1
     6a8:	41 f5       	brne	.+80     	; 0x6fa <CALLBACK_USB_GetDescriptor+0xae>
          Address = (void*)&XboxString;
          Size    = pgm_read_byte(&XboxString.Header.Size);
          break;
        case 0xee:
          Address = (void*)&ModString;
          Size    = pgm_read_byte(&ModString.Header.Size);
     6aa:	e6 e3       	ldi	r30, 0x36	; 54
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
     6ae:	e4 91       	lpm	r30, Z
     6b0:	8e 2f       	mov	r24, r30
     6b2:	90 e0       	ldi	r25, 0x00	; 0
				case 0x04:
          Address = (void*)&XboxString;
          Size    = pgm_read_byte(&XboxString.Header.Size);
          break;
        case 0xee:
          Address = (void*)&ModString;
     6b4:	26 e3       	ldi	r18, 0x36	; 54
     6b6:	31 e0       	ldi	r19, 0x01	; 1
          Size    = pgm_read_byte(&ModString.Header.Size);
          break;
     6b8:	24 c0       	rjmp	.+72     	; 0x702 <CALLBACK_USB_GetDescriptor+0xb6>
		case DTYPE_String: 
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6ba:	e2 e3       	ldi	r30, 0x32	; 50
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	e4 91       	lpm	r30, Z
     6c0:	8e 2f       	mov	r24, r30
     6c2:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = (void*)&LanguageString;
     6c4:	22 e3       	ldi	r18, 0x32	; 50
     6c6:	31 e0       	ldi	r19, 0x01	; 1
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     6c8:	1c c0       	rjmp	.+56     	; 0x702 <CALLBACK_USB_GetDescriptor+0xb6>
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6ca:	e4 e0       	ldi	r30, 0x04	; 4
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	e4 91       	lpm	r30, Z
     6d0:	8e 2f       	mov	r24, r30
     6d2:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
     6d4:	24 e0       	ldi	r18, 0x04	; 4
     6d6:	31 e0       	ldi	r19, 0x01	; 1
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     6d8:	14 c0       	rjmp	.+40     	; 0x702 <CALLBACK_USB_GetDescriptor+0xb6>
				case 0x03:
          Address = (void*)&SerialString;
          Size    = pgm_read_byte(&SerialString.Header.Size);
     6da:	e8 ee       	ldi	r30, 0xE8	; 232
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	e4 91       	lpm	r30, Z
     6e0:	8e 2f       	mov	r24, r30
     6e2:	90 e0       	ldi	r25, 0x00	; 0
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case 0x03:
          Address = (void*)&SerialString;
     6e4:	28 ee       	ldi	r18, 0xE8	; 232
     6e6:	30 e0       	ldi	r19, 0x00	; 0
          Size    = pgm_read_byte(&SerialString.Header.Size);
          break;
     6e8:	0c c0       	rjmp	.+24     	; 0x702 <CALLBACK_USB_GetDescriptor+0xb6>
				case 0x04:
          Address = (void*)&XboxString;
          Size    = pgm_read_byte(&XboxString.Header.Size);
     6ea:	ea e4       	ldi	r30, 0x4A	; 74
     6ec:	f1 e0       	ldi	r31, 0x01	; 1
     6ee:	e4 91       	lpm	r30, Z
     6f0:	8e 2f       	mov	r24, r30
     6f2:	90 e0       	ldi	r25, 0x00	; 0
				case 0x03:
          Address = (void*)&SerialString;
          Size    = pgm_read_byte(&SerialString.Header.Size);
          break;
				case 0x04:
          Address = (void*)&XboxString;
     6f4:	2a e4       	ldi	r18, 0x4A	; 74
     6f6:	31 e0       	ldi	r19, 0x01	; 1
          Size    = pgm_read_byte(&XboxString.Header.Size);
          break;
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <CALLBACK_USB_GetDescriptor+0xb6>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
          break;
			}
			break;
	}
	
	*DescriptorAddress = Address;
     702:	fa 01       	movw	r30, r20
     704:	31 83       	std	Z+1, r19	; 0x01
     706:	20 83       	st	Z, r18
	return Size;
}
     708:	08 95       	ret

0000070a <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	8b 01       	movw	r16, r22
     71e:	7a 01       	movw	r14, r20
     720:	9f d1       	rcall	.+830    	; 0xa60 <Endpoint_WaitUntilReady>
     722:	81 11       	cpse	r24, r1
     724:	33 c0       	rjmp	.+102    	; 0x78c <Endpoint_Write_Stream_LE+0x82>
     726:	e1 14       	cp	r14, r1
     728:	f1 04       	cpc	r15, r1
     72a:	39 f0       	breq	.+14     	; 0x73a <Endpoint_Write_Stream_LE+0x30>
     72c:	f7 01       	movw	r30, r14
     72e:	80 81       	ld	r24, Z
     730:	91 81       	ldd	r25, Z+1	; 0x01
     732:	08 1b       	sub	r16, r24
     734:	19 0b       	sbc	r17, r25
     736:	c8 0f       	add	r28, r24
     738:	d9 1f       	adc	r29, r25
     73a:	c1 2c       	mov	r12, r1
     73c:	d1 2c       	mov	r13, r1
     73e:	01 15       	cp	r16, r1
     740:	11 05       	cpc	r17, r1
     742:	19 f1       	breq	.+70     	; 0x78a <Endpoint_Write_Stream_LE+0x80>
     744:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     748:	85 fd       	sbrc	r24, 5
     74a:	16 c0       	rjmp	.+44     	; 0x778 <Endpoint_Write_Stream_LE+0x6e>
     74c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     750:	8e 77       	andi	r24, 0x7E	; 126
     752:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     756:	28 d4       	rcall	.+2128   	; 0xfa8 <USB_USBTask>
     758:	e1 14       	cp	r14, r1
     75a:	f1 04       	cpc	r15, r1
     75c:	49 f0       	breq	.+18     	; 0x770 <Endpoint_Write_Stream_LE+0x66>
     75e:	f7 01       	movw	r30, r14
     760:	80 81       	ld	r24, Z
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	c8 0e       	add	r12, r24
     766:	d9 1e       	adc	r13, r25
     768:	d1 82       	std	Z+1, r13	; 0x01
     76a:	c0 82       	st	Z, r12
     76c:	85 e0       	ldi	r24, 0x05	; 5
     76e:	0e c0       	rjmp	.+28     	; 0x78c <Endpoint_Write_Stream_LE+0x82>
     770:	77 d1       	rcall	.+750    	; 0xa60 <Endpoint_WaitUntilReady>
     772:	88 23       	and	r24, r24
     774:	21 f3       	breq	.-56     	; 0x73e <Endpoint_Write_Stream_LE+0x34>
     776:	0a c0       	rjmp	.+20     	; 0x78c <Endpoint_Write_Stream_LE+0x82>
     778:	89 91       	ld	r24, Y+
     77a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     77e:	01 50       	subi	r16, 0x01	; 1
     780:	11 09       	sbc	r17, r1
     782:	ff ef       	ldi	r31, 0xFF	; 255
     784:	cf 1a       	sub	r12, r31
     786:	df 0a       	sbc	r13, r31
     788:	da cf       	rjmp	.-76     	; 0x73e <Endpoint_Write_Stream_LE+0x34>
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	08 95       	ret

0000079e <Endpoint_Read_Stream_LE>:
     79e:	cf 92       	push	r12
     7a0:	df 92       	push	r13
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ec 01       	movw	r28, r24
     7b0:	8b 01       	movw	r16, r22
     7b2:	7a 01       	movw	r14, r20
     7b4:	55 d1       	rcall	.+682    	; 0xa60 <Endpoint_WaitUntilReady>
     7b6:	81 11       	cpse	r24, r1
     7b8:	33 c0       	rjmp	.+102    	; 0x820 <Endpoint_Read_Stream_LE+0x82>
     7ba:	e1 14       	cp	r14, r1
     7bc:	f1 04       	cpc	r15, r1
     7be:	39 f0       	breq	.+14     	; 0x7ce <Endpoint_Read_Stream_LE+0x30>
     7c0:	f7 01       	movw	r30, r14
     7c2:	80 81       	ld	r24, Z
     7c4:	91 81       	ldd	r25, Z+1	; 0x01
     7c6:	08 1b       	sub	r16, r24
     7c8:	19 0b       	sbc	r17, r25
     7ca:	c8 0f       	add	r28, r24
     7cc:	d9 1f       	adc	r29, r25
     7ce:	c1 2c       	mov	r12, r1
     7d0:	d1 2c       	mov	r13, r1
     7d2:	01 15       	cp	r16, r1
     7d4:	11 05       	cpc	r17, r1
     7d6:	19 f1       	breq	.+70     	; 0x81e <Endpoint_Read_Stream_LE+0x80>
     7d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7dc:	85 fd       	sbrc	r24, 5
     7de:	16 c0       	rjmp	.+44     	; 0x80c <Endpoint_Read_Stream_LE+0x6e>
     7e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7e4:	8b 77       	andi	r24, 0x7B	; 123
     7e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7ea:	de d3       	rcall	.+1980   	; 0xfa8 <USB_USBTask>
     7ec:	e1 14       	cp	r14, r1
     7ee:	f1 04       	cpc	r15, r1
     7f0:	49 f0       	breq	.+18     	; 0x804 <Endpoint_Read_Stream_LE+0x66>
     7f2:	f7 01       	movw	r30, r14
     7f4:	80 81       	ld	r24, Z
     7f6:	91 81       	ldd	r25, Z+1	; 0x01
     7f8:	c8 0e       	add	r12, r24
     7fa:	d9 1e       	adc	r13, r25
     7fc:	d1 82       	std	Z+1, r13	; 0x01
     7fe:	c0 82       	st	Z, r12
     800:	85 e0       	ldi	r24, 0x05	; 5
     802:	0e c0       	rjmp	.+28     	; 0x820 <Endpoint_Read_Stream_LE+0x82>
     804:	2d d1       	rcall	.+602    	; 0xa60 <Endpoint_WaitUntilReady>
     806:	88 23       	and	r24, r24
     808:	21 f3       	breq	.-56     	; 0x7d2 <Endpoint_Read_Stream_LE+0x34>
     80a:	0a c0       	rjmp	.+20     	; 0x820 <Endpoint_Read_Stream_LE+0x82>
     80c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     810:	89 93       	st	Y+, r24
     812:	01 50       	subi	r16, 0x01	; 1
     814:	11 09       	sbc	r17, r1
     816:	ff ef       	ldi	r31, 0xFF	; 255
     818:	cf 1a       	sub	r12, r31
     81a:	df 0a       	sbc	r13, r31
     81c:	da cf       	rjmp	.-76     	; 0x7d2 <Endpoint_Read_Stream_LE+0x34>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	08 95       	ret

00000832 <Endpoint_Write_Control_Stream_LE>:
     832:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x6>
     836:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <USB_ControlRequest+0x7>
     83a:	26 17       	cp	r18, r22
     83c:	37 07       	cpc	r19, r23
     83e:	48 f0       	brcs	.+18     	; 0x852 <Endpoint_Write_Control_Stream_LE+0x20>
     840:	61 15       	cp	r22, r1
     842:	71 05       	cpc	r23, r1
     844:	39 f4       	brne	.+14     	; 0x854 <Endpoint_Write_Control_Stream_LE+0x22>
     846:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     84a:	2e 77       	andi	r18, 0x7E	; 126
     84c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     850:	01 c0       	rjmp	.+2      	; 0x854 <Endpoint_Write_Control_Stream_LE+0x22>
     852:	b9 01       	movw	r22, r18
     854:	fc 01       	movw	r30, r24
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	61 15       	cp	r22, r1
     85a:	71 05       	cpc	r23, r1
     85c:	91 f1       	breq	.+100    	; 0x8c2 <Endpoint_Write_Control_Stream_LE+0x90>
     85e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     862:	88 23       	and	r24, r24
     864:	09 f4       	brne	.+2      	; 0x868 <Endpoint_Write_Control_Stream_LE+0x36>
     866:	40 c0       	rjmp	.+128    	; 0x8e8 <Endpoint_Write_Control_Stream_LE+0xb6>
     868:	85 30       	cpi	r24, 0x05	; 5
     86a:	09 f4       	brne	.+2      	; 0x86e <Endpoint_Write_Control_Stream_LE+0x3c>
     86c:	3f c0       	rjmp	.+126    	; 0x8ec <Endpoint_Write_Control_Stream_LE+0xba>
     86e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     872:	83 fd       	sbrc	r24, 3
     874:	3d c0       	rjmp	.+122    	; 0x8f0 <Endpoint_Write_Control_Stream_LE+0xbe>
     876:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     87a:	82 fd       	sbrc	r24, 2
     87c:	2f c0       	rjmp	.+94     	; 0x8dc <Endpoint_Write_Control_Stream_LE+0xaa>
     87e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     882:	80 ff       	sbrs	r24, 0
     884:	e9 cf       	rjmp	.-46     	; 0x858 <Endpoint_Write_Control_Stream_LE+0x26>
     886:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     88a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	92 2b       	or	r25, r18
     892:	61 15       	cp	r22, r1
     894:	71 05       	cpc	r23, r1
     896:	51 f0       	breq	.+20     	; 0x8ac <Endpoint_Write_Control_Stream_LE+0x7a>
     898:	80 34       	cpi	r24, 0x40	; 64
     89a:	91 05       	cpc	r25, r1
     89c:	38 f4       	brcc	.+14     	; 0x8ac <Endpoint_Write_Control_Stream_LE+0x7a>
     89e:	21 91       	ld	r18, Z+
     8a0:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8a4:	61 50       	subi	r22, 0x01	; 1
     8a6:	71 09       	sbc	r23, r1
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	f3 cf       	rjmp	.-26     	; 0x892 <Endpoint_Write_Control_Stream_LE+0x60>
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	80 34       	cpi	r24, 0x40	; 64
     8b0:	91 05       	cpc	r25, r1
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <Endpoint_Write_Control_Stream_LE+0x84>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8ba:	8e 77       	andi	r24, 0x7E	; 126
     8bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8c0:	cb cf       	rjmp	.-106    	; 0x858 <Endpoint_Write_Control_Stream_LE+0x26>
     8c2:	21 11       	cpse	r18, r1
     8c4:	cc cf       	rjmp	.-104    	; 0x85e <Endpoint_Write_Control_Stream_LE+0x2c>
     8c6:	0a c0       	rjmp	.+20     	; 0x8dc <Endpoint_Write_Control_Stream_LE+0xaa>
     8c8:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     8cc:	88 23       	and	r24, r24
     8ce:	61 f0       	breq	.+24     	; 0x8e8 <Endpoint_Write_Control_Stream_LE+0xb6>
     8d0:	85 30       	cpi	r24, 0x05	; 5
     8d2:	61 f0       	breq	.+24     	; 0x8ec <Endpoint_Write_Control_Stream_LE+0xba>
     8d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8d8:	83 fd       	sbrc	r24, 3
     8da:	0a c0       	rjmp	.+20     	; 0x8f0 <Endpoint_Write_Control_Stream_LE+0xbe>
     8dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8e0:	82 ff       	sbrs	r24, 2
     8e2:	f2 cf       	rjmp	.-28     	; 0x8c8 <Endpoint_Write_Control_Stream_LE+0x96>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 95       	ret
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	08 95       	ret
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	08 95       	ret
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 95       	ret

000008f4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8f4:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x6>
     8f8:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <USB_ControlRequest+0x7>
     8fc:	26 17       	cp	r18, r22
     8fe:	37 07       	cpc	r19, r23
     900:	48 f0       	brcs	.+18     	; 0x914 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	39 f4       	brne	.+14     	; 0x916 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     908:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     90c:	2e 77       	andi	r18, 0x7E	; 126
     90e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     912:	01 c0       	rjmp	.+2      	; 0x916 <Endpoint_Write_Control_PStream_LE+0x22>
     914:	b9 01       	movw	r22, r18
     916:	fc 01       	movw	r30, r24
     918:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     91a:	61 15       	cp	r22, r1
     91c:	71 05       	cpc	r23, r1
     91e:	99 f1       	breq	.+102    	; 0x986 <Endpoint_Write_Control_PStream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     920:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     924:	88 23       	and	r24, r24
     926:	09 f4       	brne	.+2      	; 0x92a <Endpoint_Write_Control_PStream_LE+0x36>
     928:	41 c0       	rjmp	.+130    	; 0x9ac <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     92a:	85 30       	cpi	r24, 0x05	; 5
     92c:	09 f4       	brne	.+2      	; 0x930 <Endpoint_Write_Control_PStream_LE+0x3c>
     92e:	40 c0       	rjmp	.+128    	; 0x9b0 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     930:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     934:	83 fd       	sbrc	r24, 3
     936:	3e c0       	rjmp	.+124    	; 0x9b4 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     938:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     93c:	82 fd       	sbrc	r24, 2
     93e:	30 c0       	rjmp	.+96     	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     940:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
     944:	80 ff       	sbrs	r24, 0
     946:	e9 cf       	rjmp	.-46     	; 0x91a <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     948:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     94c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	92 2b       	or	r25, r18
		{
		  uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     954:	61 15       	cp	r22, r1
     956:	71 05       	cpc	r23, r1
     958:	59 f0       	breq	.+22     	; 0x970 <Endpoint_Write_Control_PStream_LE+0x7c>
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	40 f4       	brcc	.+16     	; 0x970 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     960:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     962:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     966:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     968:	61 50       	subi	r22, 0x01	; 1
     96a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	f2 cf       	rjmp	.-28     	; 0x954 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	80 34       	cpi	r24, 0x40	; 64
     974:	91 05       	cpc	r25, r1
     976:	09 f0       	breq	.+2      	; 0x97a <Endpoint_Write_Control_PStream_LE+0x86>
     978:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     97a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     97e:	8e 77       	andi	r24, 0x7E	; 126
     980:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     984:	ca cf       	rjmp	.-108    	; 0x91a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     986:	21 11       	cpse	r18, r1
     988:	cb cf       	rjmp	.-106    	; 0x920 <Endpoint_Write_Control_PStream_LE+0x2c>
     98a:	0a c0       	rjmp	.+20     	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
	  uint8_t USB_DeviceState_LCL = USB_DeviceState;
     98c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     990:	88 23       	and	r24, r24
     992:	61 f0       	breq	.+24     	; 0x9ac <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     994:	85 30       	cpi	r24, 0x05	; 5
     996:	61 f0       	breq	.+24     	; 0x9b0 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     998:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     99c:	83 fd       	sbrc	r24, 3
     99e:	0a c0       	rjmp	.+20     	; 0x9b4 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9a4:	82 ff       	sbrs	r24, 2
     9a6:	f2 cf       	rjmp	.-28     	; 0x98c <Endpoint_Write_Control_PStream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9b6:	08 95       	ret

000009b8 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     9b8:	98 2f       	mov	r25, r24
     9ba:	97 30       	cpi	r25, 0x07	; 7
     9bc:	68 f5       	brcc	.+90     	; 0xa18 <Endpoint_ConfigureEndpoint_Prv+0x60>
     9be:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     9c2:	98 17       	cp	r25, r24
     9c4:	39 f0       	breq	.+14     	; 0x9d4 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     9c6:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     9ca:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     9ce:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <Endpoint_ConfigureEndpoint_Prv+0x22>
     9d4:	24 2f       	mov	r18, r20
     9d6:	76 2f       	mov	r23, r22
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	21 fd       	sbrc	r18, 1
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     9de:	9f 5f       	subi	r25, 0xFF	; 255
     9e0:	ec cf       	rjmp	.-40     	; 0x9ba <Endpoint_ConfigureEndpoint_Prv+0x2>
     9e2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     9e6:	3e 7f       	andi	r19, 0xFE	; 254
     9e8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     9ec:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     9f0:	3d 7f       	andi	r19, 0xFD	; 253
     9f2:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     9f6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     9fa:	31 60       	ori	r19, 0x01	; 1
     9fc:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a00:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     a04:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     a08:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     a0c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     a10:	27 fd       	sbrc	r18, 7
     a12:	e5 cf       	rjmp	.-54     	; 0x9de <Endpoint_ConfigureEndpoint_Prv+0x26>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	08 95       	ret
     a18:	8f 70       	andi	r24, 0x0F	; 15
     a1a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	08 95       	ret

00000a22 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     a22:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>
     a26:	87 ff       	sbrs	r24, 7
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     a2e:	82 fd       	sbrc	r24, 2
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a32:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     a36:	81 11       	cpse	r24, r1
     a38:	f8 cf       	rjmp	.-16     	; 0xa2a <Endpoint_ClearStatusStage+0x8>
     a3a:	11 c0       	rjmp	.+34     	; 0xa5e <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a40:	8b 77       	andi	r24, 0x7B	; 123
     a42:	0b c0       	rjmp	.+22     	; 0xa5a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a44:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     a48:	88 23       	and	r24, r24
     a4a:	49 f0       	breq	.+18     	; 0xa5e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     a50:	80 ff       	sbrs	r24, 0
     a52:	f8 cf       	rjmp	.-16     	; 0xa44 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a58:	8e 77       	andi	r24, 0x7E	; 126
     a5a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a5e:	08 95       	ret

00000a60 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     a60:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     a64:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     a68:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a6a:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     a6e:	84 2f       	mov	r24, r20
     a70:	81 70       	andi	r24, 0x01	; 1
     a72:	40 ff       	sbrs	r20, 0
     a74:	23 c0       	rjmp	.+70     	; 0xabc <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     a7a:	80 fd       	sbrc	r24, 0
     a7c:	1d c0       	rjmp	.+58     	; 0xab8 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a7e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a82:	88 23       	and	r24, r24
     a84:	99 f0       	breq	.+38     	; 0xaac <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a86:	85 30       	cpi	r24, 0x05	; 5
     a88:	99 f0       	breq	.+38     	; 0xab0 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a8a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     a8e:	85 fd       	sbrc	r24, 5
     a90:	11 c0       	rjmp	.+34     	; 0xab4 <Endpoint_WaitUntilReady+0x54>
     a92:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     a96:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a9a:	24 17       	cp	r18, r20
     a9c:	35 07       	cpc	r19, r21
     a9e:	29 f3       	breq	.-54     	; 0xa6a <Endpoint_WaitUntilReady+0xa>
     aa0:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     aa2:	11 f0       	breq	.+4      	; 0xaa8 <Endpoint_WaitUntilReady+0x48>
     aa4:	9a 01       	movw	r18, r20
     aa6:	e1 cf       	rjmp	.-62     	; 0xa6a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     aa8:	84 e0       	ldi	r24, 0x04	; 4
     aaa:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     abc:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     ac0:	42 ff       	sbrs	r20, 2
     ac2:	dd cf       	rjmp	.-70     	; 0xa7e <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     ac4:	08 95       	ret

00000ac6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     ace:	4b d0       	rcall	.+150    	; 0xb66 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ad0:	52 d0       	rcall	.+164    	; 0xb76 <USB_INT_ClearAllInterrupts>
     ad2:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
     ad6:	88 81       	ld	r24, Y
     ad8:	8f 77       	andi	r24, 0x7F	; 127
     ada:	88 83       	st	Y, r24
     adc:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     ade:	80 68       	ori	r24, 0x80	; 128
     ae0:	88 83       	st	Y, r24
     ae2:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ae4:	8f 7d       	andi	r24, 0xDF	; 223
     ae6:	88 83       	st	Y, r24
     ae8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     aea:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     aee:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     af2:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     af6:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     afa:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	f8 01       	movw	r30, r16
     b00:	80 81       	ld	r24, Z
     b02:	8b 7f       	andi	r24, 0xFB	; 251
     b04:	80 83       	st	Z, r24
     b06:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	88 83       	st	Y, r24
     b0c:	42 e3       	ldi	r20, 0x32	; 50
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	52 df       	rcall	.-348    	; 0x9b8 <Endpoint_ConfigureEndpoint_Prv>
     b14:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	8e 7f       	andi	r24, 0xFE	; 254
     b1c:	80 83       	st	Z, r24
     b1e:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	81 60       	ori	r24, 0x01	; 1
     b26:	80 83       	st	Z, r24
     b28:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     b2a:	88 60       	ori	r24, 0x08	; 8
     b2c:	80 83       	st	Z, r24
     b2e:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b30:	80 81       	ld	r24, Z
     b32:	8e 7f       	andi	r24, 0xFE	; 254
     b34:	80 83       	st	Z, r24
     b36:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b38:	80 61       	ori	r24, 0x10	; 16
     b3a:	88 83       	st	Y, r24
     b3c:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <USB_Init>:
     b46:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	8f 7e       	andi	r24, 0xEF	; 239
     b4e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b50:	e7 ed       	ldi	r30, 0xD7	; 215
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	81 60       	ori	r24, 0x01	; 1
     b58:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <USB_IsInitialized>

	USB_ResetInterface();
     b64:	b0 cf       	rjmp	.-160    	; 0xac6 <USB_ResetInterface>

00000b66 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     b66:	e8 ed       	ldi	r30, 0xD8	; 216
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8e 7f       	andi	r24, 0xFE	; 254
     b6e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     b70:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     b74:	08 95       	ret

00000b76 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b76:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     b7a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     b7e:	08 95       	ret

00000b80 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b80:	1f 92       	push	r1
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     ba2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     ba6:	82 ff       	sbrs	r24, 2
     ba8:	0a c0       	rjmp	.+20     	; 0xbbe <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     baa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     bae:	82 ff       	sbrs	r24, 2
     bb0:	06 c0       	rjmp	.+12     	; 0xbbe <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     bb2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     bb6:	8b 7f       	andi	r24, 0xFB	; 251
     bb8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     bbc:	f4 d1       	rcall	.+1000   	; 0xfa6 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     bbe:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     bc2:	80 ff       	sbrs	r24, 0
     bc4:	1d c0       	rjmp	.+58     	; 0xc00 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     bc6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bca:	80 ff       	sbrs	r24, 0
     bcc:	19 c0       	rjmp	.+50     	; 0xc00 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     bce:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     bd2:	8e 7f       	andi	r24, 0xFE	; 254
     bd4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     bd8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     bdc:	80 ff       	sbrs	r24, 0
     bde:	0c c0       	rjmp	.+24     	; 0xbf8 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     be0:	80 e1       	ldi	r24, 0x10	; 16
     be2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     be4:	82 e1       	ldi	r24, 0x12	; 18
     be6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     be8:	09 b4       	in	r0, 0x29	; 41
     bea:	00 fe       	sbrs	r0, 0
     bec:	fd cf       	rjmp	.-6      	; 0xbe8 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     bf4:	58 dc       	rcall	.-1872   	; 0x4a6 <EVENT_USB_Device_Connect>
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bf8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     bfa:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     bfe:	54 dc       	rcall	.-1880   	; 0x4a8 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     c00:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     c04:	80 ff       	sbrs	r24, 0
     c06:	18 c0       	rjmp	.+48     	; 0xc38 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     c08:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c0c:	80 ff       	sbrs	r24, 0
     c0e:	14 c0       	rjmp	.+40     	; 0xc38 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c10:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c14:	8e 7f       	andi	r24, 0xFE	; 254
     c16:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c1a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c1e:	80 61       	ori	r24, 0x10	; 16
     c20:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     c24:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c28:	80 62       	ori	r24, 0x20	; 32
     c2a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c2e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     c30:	85 e0       	ldi	r24, 0x05	; 5
     c32:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     c36:	b7 d1       	rcall	.+878    	; 0xfa6 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     c38:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     c3c:	84 ff       	sbrs	r24, 4
     c3e:	2f c0       	rjmp	.+94     	; 0xc9e <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     c40:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c44:	84 ff       	sbrs	r24, 4
     c46:	2b c0       	rjmp	.+86     	; 0xc9e <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c48:	80 e1       	ldi	r24, 0x10	; 16
     c4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c4c:	82 e1       	ldi	r24, 0x12	; 18
     c4e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c50:	09 b4       	in	r0, 0x29	; 41
     c52:	00 fe       	sbrs	r0, 0
     c54:	fd cf       	rjmp	.-6      	; 0xc50 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c56:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c5a:	8f 7d       	andi	r24, 0xDF	; 223
     c5c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     c60:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     c64:	8f 7e       	andi	r24, 0xEF	; 239
     c66:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     c6a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c6e:	8f 7e       	andi	r24, 0xEF	; 239
     c70:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c74:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c78:	81 60       	ori	r24, 0x01	; 1
     c7a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     c7e:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <USB_Device_ConfigurationNumber>
     c82:	88 23       	and	r24, r24
     c84:	11 f0       	breq	.+4      	; 0xc8a <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     c86:	84 e0       	ldi	r24, 0x04	; 4
     c88:	07 c0       	rjmp	.+14     	; 0xc98 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c8a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     c8e:	87 fd       	sbrc	r24, 7
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <__vector_10+0x116>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <__vector_10+0x118>
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     c9c:	84 d1       	rcall	.+776    	; 0xfa6 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     c9e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     ca2:	83 ff       	sbrs	r24, 3
     ca4:	22 c0       	rjmp	.+68     	; 0xcea <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     ca6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     caa:	83 ff       	sbrs	r24, 3
     cac:	1e c0       	rjmp	.+60     	; 0xcea <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     cae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     cbe:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     cc2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     cc6:	8e 7f       	andi	r24, 0xFE	; 254
     cc8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ccc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     cd0:	8e 7f       	andi	r24, 0xFE	; 254
     cd2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     cd6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     cda:	80 61       	ori	r24, 0x10	; 16
     cdc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ce0:	42 e3       	ldi	r20, 0x32	; 50
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	68 de       	rcall	.-816    	; 0x9b8 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     ce8:	5e d1       	rcall	.+700    	; 0xfa6 <USB_Event_Stub>
     cea:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	1f 90       	pop	r1
     d0a:	18 95       	reti

00000d0c <USB_Device_ProcessControlRequest>:
     d0c:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	aa 97       	sbiw	r28, 0x2a	; 42
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	e2 ed       	ldi	r30, 0xD2	; 210
     d24:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d26:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     d2a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	ea 3d       	cpi	r30, 0xDA	; 218
     d30:	f2 07       	cpc	r31, r18
     d32:	c9 f7       	brne	.-14     	; 0xd26 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     d34:	c2 db       	rcall	.-2172   	; 0x4ba <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     d3a:	83 ff       	sbrs	r24, 3
     d3c:	1c c1       	rjmp	.+568    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     d3e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     d42:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <USB_ControlRequest+0x1>
     d46:	49 2f       	mov	r20, r25
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	4a 30       	cpi	r20, 0x0A	; 10
     d4c:	51 05       	cpc	r21, r1
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <USB_Device_ProcessControlRequest+0x46>
     d50:	12 c1       	rjmp	.+548    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
     d52:	fa 01       	movw	r30, r20
     d54:	ea 5a       	subi	r30, 0xAA	; 170
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	51 c1       	rjmp	.+674    	; 0xffc <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d5a:	80 38       	cpi	r24, 0x80	; 128
     d5c:	81 f0       	breq	.+32     	; 0xd7e <USB_Device_ProcessControlRequest+0x72>
     d5e:	82 38       	cpi	r24, 0x82	; 130
     d60:	09 f0       	breq	.+2      	; 0xd64 <USB_Device_ProcessControlRequest+0x58>
     d62:	09 c1       	rjmp	.+530    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d64:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     d68:	8f 70       	andi	r24, 0x0F	; 15
     d6a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d6e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     d72:	85 fb       	bst	r24, 5
     d74:	88 27       	eor	r24, r24
     d76:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d78:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     d7c:	06 c0       	rjmp	.+12     	; 0xd8a <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     d7e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     d82:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <USB_Device_RemoteWakeupEnabled>
     d86:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     d88:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d8a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d8e:	97 7f       	andi	r25, 0xF7	; 247
     d90:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d94:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     d98:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     d9c:	c4 c0       	rjmp	.+392    	; 0xf26 <USB_Device_ProcessControlRequest+0x21a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d9e:	28 2f       	mov	r18, r24
     da0:	2d 7f       	andi	r18, 0xFD	; 253
     da2:	09 f0       	breq	.+2      	; 0xda6 <USB_Device_ProcessControlRequest+0x9a>
     da4:	e8 c0       	rjmp	.+464    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     da6:	88 23       	and	r24, r24
     da8:	19 f0       	breq	.+6      	; 0xdb0 <USB_Device_ProcessControlRequest+0xa4>
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	61 f0       	breq	.+24     	; 0xdc6 <USB_Device_ProcessControlRequest+0xba>
     dae:	e3 c0       	rjmp	.+454    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     db0:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	09 f0       	breq	.+2      	; 0xdba <USB_Device_ProcessControlRequest+0xae>
     db8:	de c0       	rjmp	.+444    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     dba:	93 30       	cpi	r25, 0x03	; 3
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <USB_Device_ProcessControlRequest+0xb4>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <USB_Device_RemoteWakeupEnabled>
     dc4:	2b c0       	rjmp	.+86     	; 0xe1c <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     dc6:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     dca:	81 11       	cpse	r24, r1
     dcc:	27 c0       	rjmp	.+78     	; 0xe1c <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     dce:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     dd2:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <USB_Device_ProcessControlRequest+0xcc>
     dd6:	cf c0       	rjmp	.+414    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dd8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ddc:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     de0:	20 ff       	sbrs	r18, 0
     de2:	1c c0       	rjmp	.+56     	; 0xe1c <USB_Device_ProcessControlRequest+0x110>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     de4:	93 30       	cpi	r25, 0x03	; 3
     de6:	21 f4       	brne	.+8      	; 0xdf0 <USB_Device_ProcessControlRequest+0xe4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     de8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     dec:	80 62       	ori	r24, 0x20	; 32
     dee:	14 c0       	rjmp	.+40     	; 0xe18 <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     df0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     df4:	90 61       	ori	r25, 0x10	; 16
     df6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	a9 01       	movw	r20, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <USB_Device_ProcessControlRequest+0xfa>
     e02:	44 0f       	add	r20, r20
     e04:	55 1f       	adc	r21, r21
     e06:	8a 95       	dec	r24
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <USB_Device_ProcessControlRequest+0xf6>
     e0a:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     e0e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     e12:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     e16:	88 60       	ori	r24, 0x08	; 8
     e18:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e1c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	82 c0       	rjmp	.+260    	; 0xf2c <USB_Device_ProcessControlRequest+0x220>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e28:	81 11       	cpse	r24, r1
     e2a:	a5 c0       	rjmp	.+330    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     e2c:	10 91 d4 01 	lds	r17, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     e30:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     e32:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     e36:	80 78       	andi	r24, 0x80	; 128
     e38:	81 2b       	or	r24, r17
     e3a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     e3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e42:	87 7f       	andi	r24, 0xF7	; 247
     e44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     e48:	ec dd       	rcall	.-1064   	; 0xa22 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
     e4e:	80 ff       	sbrs	r24, 0
     e50:	fc cf       	rjmp	.-8      	; 0xe4a <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     e52:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     e56:	80 68       	ori	r24, 0x80	; 128
     e58:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     e5c:	11 11       	cpse	r17, r1
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <USB_Device_ProcessControlRequest+0x158>
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <USB_Device_ProcessControlRequest+0x15a>
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>
     e6a:	85 c0       	rjmp	.+266    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e6c:	80 58       	subi	r24, 0x80	; 128
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	08 f0       	brcs	.+2      	; 0xe74 <USB_Device_ProcessControlRequest+0x168>
     e72:	81 c0       	rjmp	.+258    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     e74:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     e78:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <USB_ControlRequest+0x3>
     e7c:	8c 3d       	cpi	r24, 0xDC	; 220
     e7e:	53 e0       	ldi	r21, 0x03	; 3
     e80:	95 07       	cpc	r25, r21
     e82:	71 f5       	brne	.+92     	; 0xee0 <USB_Device_ProcessControlRequest+0x1d4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     e88:	8a e2       	ldi	r24, 0x2A	; 42
     e8a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e8c:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e8e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     e90:	de 01       	movw	r26, r28
     e92:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e94:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     e96:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e98:	51 e2       	ldi	r21, 0x21	; 33
     e9a:	e3 2f       	mov	r30, r19
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     ea2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     ea4:	20 ff       	sbrs	r18, 0
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
     ea8:	e2 95       	swap	r30
     eaa:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     eac:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     eae:	ef 70       	andi	r30, 0x0F	; 15
     eb0:	8e 2f       	mov	r24, r30
     eb2:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     eb4:	ea 30       	cpi	r30, 0x0A	; 10
     eb6:	10 f0       	brcs	.+4      	; 0xebc <USB_Device_ProcessControlRequest+0x1b0>
     eb8:	c7 96       	adiw	r24, 0x37	; 55
     eba:	01 c0       	rjmp	.+2      	; 0xebe <USB_Device_ProcessControlRequest+0x1b2>
     ebc:	c0 96       	adiw	r24, 0x30	; 48
     ebe:	8d 93       	st	X+, r24
     ec0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ec2:	2f 5f       	subi	r18, 0xFF	; 255
     ec4:	24 31       	cpi	r18, 0x14	; 20
     ec6:	49 f7       	brne	.-46     	; 0xe9a <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ec8:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ece:	87 7f       	andi	r24, 0xF7	; 247
     ed0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     ed4:	6a e2       	ldi	r22, 0x2A	; 42
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	aa dc       	rcall	.-1708   	; 0x832 <Endpoint_Write_Control_Stream_LE>
     ede:	12 c0       	rjmp	.+36     	; 0xf04 <USB_Device_ProcessControlRequest+0x1f8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     ee0:	ae 01       	movw	r20, r28
     ee2:	4f 5f       	subi	r20, 0xFF	; 255
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     eea:	b0 db       	rcall	.-2208   	; 0x64c <CALLBACK_USB_GetDescriptor>
     eec:	bc 01       	movw	r22, r24
     eee:	89 2b       	or	r24, r25
     ef0:	09 f4       	brne	.+2      	; 0xef4 <USB_Device_ProcessControlRequest+0x1e8>
     ef2:	41 c0       	rjmp	.+130    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
     ef4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ef8:	97 7f       	andi	r25, 0xF7	; 247
     efa:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	f8 dc       	rcall	.-1552   	; 0x8f4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f08:	8b 77       	andi	r24, 0x7B	; 123
     f0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f0e:	33 c0       	rjmp	.+102    	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     f10:	80 38       	cpi	r24, 0x80	; 128
     f12:	89 f5       	brne	.+98     	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f18:	87 7f       	andi	r24, 0xF7	; 247
     f1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     f1e:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f22:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f2a:	8e 77       	andi	r24, 0x7E	; 126
     f2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f30:	78 dd       	rcall	.-1296   	; 0xa22 <Endpoint_ClearStatusStage>
     f32:	21 c0       	rjmp	.+66     	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     f34:	81 11       	cpse	r24, r1
     f36:	1f c0       	rjmp	.+62     	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     f38:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     f3c:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <USB_ControlRequest+0x3>
     f40:	99 27       	eor	r25, r25
     f42:	02 97       	sbiw	r24, 0x02	; 2
     f44:	c4 f4       	brge	.+48     	; 0xf76 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     f50:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     f54:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     f58:	64 dd       	rcall	.-1336   	; 0xa22 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     f5a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <USB_Device_ConfigurationNumber>
     f5e:	81 11       	cpse	r24, r1
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <USB_Device_ProcessControlRequest+0x262>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f62:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f66:	87 fd       	sbrc	r24, 7
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <USB_Device_ProcessControlRequest+0x262>
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <USB_Device_ProcessControlRequest+0x264>
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     f74:	9a da       	rcall	.-2764   	; 0x4aa <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     f7a:	83 ff       	sbrs	r24, 3
     f7c:	0a c0       	rjmp	.+20     	; 0xf92 <USB_Device_ProcessControlRequest+0x286>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f82:	87 7f       	andi	r24, 0xF7	; 247
     f84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f88:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     f8c:	80 62       	ori	r24, 0x20	; 32
     f8e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     f92:	aa 96       	adiw	r28, 0x2a	; 42
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	08 95       	ret

00000fa6 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     fa6:	08 95       	ret

00000fa8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     fa8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     faa:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     fae:	88 23       	and	r24, r24
     fb0:	99 f0       	breq	.+38     	; 0xfd8 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     fb2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     fb6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     fb8:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     fbc:	89 2f       	mov	r24, r25
     fbe:	81 70       	andi	r24, 0x01	; 1
     fc0:	90 fd       	sbrc	r25, 0
     fc2:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     fc4:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fc6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     fce:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     fd0:	9d de       	rcall	.-710    	; 0xd0c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fd2:	cf 70       	andi	r28, 0x0F	; 15
     fd4:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <Serial_SendData>:
	}
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
     fdc:	68 0f       	add	r22, r24
     fde:	79 1f       	adc	r23, r25
	while (Length--)
     fe0:	86 17       	cp	r24, r22
     fe2:	97 07       	cpc	r25, r23
     fe4:	51 f0       	breq	.+20     	; 0xffa <Serial_SendData+0x1e>
	  Serial_SendByte(*((uint8_t*)Buffer++));
     fe6:	fc 01       	movw	r30, r24
     fe8:	21 91       	ld	r18, Z+
     fea:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     fec:	30 91 c8 00 	lds	r19, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     ff0:	35 ff       	sbrs	r19, 5
     ff2:	fc cf       	rjmp	.-8      	; 0xfec <Serial_SendData+0x10>
				UDR1 = DataByte;
     ff4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     ff8:	f3 cf       	rjmp	.-26     	; 0xfe0 <Serial_SendData+0x4>
}
     ffa:	08 95       	ret

00000ffc <__tablejump2__>:
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	05 90       	lpm	r0, Z+
    1002:	f4 91       	lpm	r31, Z
    1004:	e0 2d       	mov	r30, r0
    1006:	09 94       	ijmp

00001008 <_exit>:
    1008:	f8 94       	cli

0000100a <__stop_program>:
    100a:	ff cf       	rjmp	.-2      	; 0x100a <__stop_program>
