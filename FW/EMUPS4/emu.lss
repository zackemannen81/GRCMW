
emu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  0000109c  00001130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000109c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800182  00800182  000011b2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005847  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c13  00000000  00000000  00006d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000302a  00000000  00000000  00008916  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a0  00000000  00000000  0000b940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f9b  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000030aa  00000000  00000000  0000e07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  00011125  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
       2:	00 00       	nop
       4:	36 c1       	rjmp	.+620    	; 0x272 <__bad_interrupt>
       6:	00 00       	nop
       8:	34 c1       	rjmp	.+616    	; 0x272 <__bad_interrupt>
       a:	00 00       	nop
       c:	32 c1       	rjmp	.+612    	; 0x272 <__bad_interrupt>
       e:	00 00       	nop
      10:	30 c1       	rjmp	.+608    	; 0x272 <__bad_interrupt>
      12:	00 00       	nop
      14:	2e c1       	rjmp	.+604    	; 0x272 <__bad_interrupt>
      16:	00 00       	nop
      18:	2c c1       	rjmp	.+600    	; 0x272 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2a c1       	rjmp	.+596    	; 0x272 <__bad_interrupt>
      1e:	00 00       	nop
      20:	28 c1       	rjmp	.+592    	; 0x272 <__bad_interrupt>
      22:	00 00       	nop
      24:	26 c1       	rjmp	.+588    	; 0x272 <__bad_interrupt>
      26:	00 00       	nop
      28:	ea c5       	rjmp	.+3028   	; 0xbfe <__vector_10>
      2a:	00 00       	nop
      2c:	22 c1       	rjmp	.+580    	; 0x272 <__bad_interrupt>
      2e:	00 00       	nop
      30:	20 c1       	rjmp	.+576    	; 0x272 <__bad_interrupt>
      32:	00 00       	nop
      34:	1e c1       	rjmp	.+572    	; 0x272 <__bad_interrupt>
      36:	00 00       	nop
      38:	1c c1       	rjmp	.+568    	; 0x272 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1a c1       	rjmp	.+564    	; 0x272 <__bad_interrupt>
      3e:	00 00       	nop
      40:	18 c1       	rjmp	.+560    	; 0x272 <__bad_interrupt>
      42:	00 00       	nop
      44:	16 c1       	rjmp	.+556    	; 0x272 <__bad_interrupt>
      46:	00 00       	nop
      48:	14 c1       	rjmp	.+552    	; 0x272 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	12 c1       	rjmp	.+548    	; 0x272 <__bad_interrupt>
      4e:	00 00       	nop
      50:	10 c1       	rjmp	.+544    	; 0x272 <__bad_interrupt>
      52:	00 00       	nop
      54:	0e c1       	rjmp	.+540    	; 0x272 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c c1       	rjmp	.+536    	; 0x272 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0a c1       	rjmp	.+532    	; 0x272 <__bad_interrupt>
      5e:	00 00       	nop
      60:	08 c1       	rjmp	.+528    	; 0x272 <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c1       	rjmp	.+612    	; 0x2ca <__vector_25>
      66:	00 00       	nop
      68:	04 c1       	rjmp	.+520    	; 0x272 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	02 c1       	rjmp	.+516    	; 0x272 <__bad_interrupt>
      6e:	00 00       	nop
      70:	00 c1       	rjmp	.+512    	; 0x272 <__bad_interrupt>
      72:	00 00       	nop
      74:	fe c0       	rjmp	.+508    	; 0x272 <__bad_interrupt>
      76:	00 00       	nop
      78:	fc c0       	rjmp	.+504    	; 0x272 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fa c0       	rjmp	.+500    	; 0x272 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f8 c0       	rjmp	.+496    	; 0x272 <__bad_interrupt>
      82:	00 00       	nop
      84:	f6 c0       	rjmp	.+492    	; 0x272 <__bad_interrupt>
      86:	00 00       	nop
      88:	f4 c0       	rjmp	.+488    	; 0x272 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f2 c0       	rjmp	.+484    	; 0x272 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f0 c0       	rjmp	.+480    	; 0x272 <__bad_interrupt>
      92:	00 00       	nop
      94:	ee c0       	rjmp	.+476    	; 0x272 <__bad_interrupt>
      96:	00 00       	nop
      98:	ec c0       	rjmp	.+472    	; 0x272 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ea c0       	rjmp	.+468    	; 0x272 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e8 c0       	rjmp	.+464    	; 0x272 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e6 c0       	rjmp	.+460    	; 0x272 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e4 c0       	rjmp	.+456    	; 0x272 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ec 06       	cpc	r14, r28
      ae:	0e 07       	cpc	r16, r30
      b0:	fa 07       	cpc	r31, r26
      b2:	0e 07       	cpc	r16, r30
      b4:	fa 07       	cpc	r31, r26
      b6:	53 07       	cpc	r21, r19
      b8:	75 07       	cpc	r23, r21
      ba:	fa 07       	cpc	r31, r26
      bc:	c7 07       	cpc	r28, r23
      be:	d9 07       	cpc	r29, r25

000000c0 <__trampolines_end>:
      c0:	03 21       	and	r16, r3
      c2:	27 04       	cpc	r2, r7
      c4:	41 00       	.word	0x0041	; ????
      c6:	2c 56       	subi	r18, 0x6C	; 108
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	0d 0d       	add	r16, r13
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	00 00       	nop

000000f0 <buff3>:
      f0:	f3 00 38 38 00 00 00 00                             ..88....

000000f8 <ProductString>:
      f8:	2a 03 57 00 69 00 72 00 65 00 6c 00 65 00 73 00     *.W.i.r.e.l.e.s.
     108:	73 00 20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00     s. .C.o.n.t.r.o.
     118:	6c 00 6c 00 65 00 72 00 00 00                       l.l.e.r...

00000122 <ManufacturerString>:
     122:	3a 03 53 00 6f 00 6e 00 79 00 20 00 43 00 6f 00     :.S.o.n.y. .C.o.
     132:	6d 00 70 00 75 00 74 00 65 00 72 00 20 00 45 00     m.p.u.t.e.r. .E.
     142:	6e 00 74 00 65 00 72 00 74 00 61 00 69 00 6e 00     n.t.e.r.t.a.i.n.
     152:	6d 00 65 00 6e 00 74 00 00 00                       m.e.n.t...

0000015c <LanguageString>:
     15c:	04 03 09 04                                         ....

00000160 <ConfigurationDescriptor>:
     160:	09 02 29 00 01 01 00 c0 fa 09 04 00 00 02 03 00     ..).............
     170:	00 00 09 21 11 01 00 01 22 a0 00 07 05 84 03 40     ...!...."......@
     180:	00 05 07 05 03 03 40 00 05                          ......@..

00000189 <DeviceDescriptor>:
     189:	12 01 00 02 00 00 00 40 eb 03 43 20 00 01 01 02     .......@..C ....
     199:	00 01                                               ..

0000019b <Report>:
     19b:	05 01 09 05 a1 01 85 01 09 30 09 31 09 32 09 35     .........0.1.2.5
     1ab:	15 00 26 ff 00 75 08 95 04 81 02 09 39 15 00 25     ..&..u......9..%
     1bb:	07 35 00 46 3b 01 65 14 75 04 95 01 81 42 65 00     .5.F;.e.u....Be.
     1cb:	05 09 19 01 29 0e 15 00 25 01 75 01 95 0e 81 02     ....)...%.u.....
     1db:	06 00 ff 09 20 75 06 95 01 81 02 05 01 09 33 09     .... u........3.
     1eb:	34 15 00 26 ff 00 75 08 95 02 81 02 06 00 ff 09     4..&..u.........
     1fb:	21 95 36 81 02 85 05 09 22 95 1f 91 02 85 03 0a     !.6.....".......
     20b:	21 27 95 2f b1 02 c0 06 f0 ff 09 40 a1 01 85 f0     !'./.......@....
     21b:	09 47 95 3f b1 02 85 f1 09 48 95 3f b1 02 85 f2     .G.?.....H.?....
     22b:	09 49 95 0f b1 02 85 f3 0a 01 47 95 07 b1 02 c0     .I........G.....
     23b:	00                                                  .

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	da e0       	ldi	r29, 0x0A	; 10
     244:	de bf       	out	0x3e, r29	; 62
     246:	cd bf       	out	0x3d, r28	; 61

00000248 <__do_copy_data>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b1 e0       	ldi	r27, 0x01	; 1
     24e:	ec e9       	ldi	r30, 0x9C	; 156
     250:	f0 e1       	ldi	r31, 0x10	; 16
     252:	02 c0       	rjmp	.+4      	; 0x258 <__do_copy_data+0x10>
     254:	05 90       	lpm	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	a2 38       	cpi	r26, 0x82	; 130
     25a:	b1 07       	cpc	r27, r17
     25c:	d9 f7       	brne	.-10     	; 0x254 <__do_copy_data+0xc>

0000025e <__do_clear_bss>:
     25e:	22 e0       	ldi	r18, 0x02	; 2
     260:	a2 e8       	ldi	r26, 0x82	; 130
     262:	b1 e0       	ldi	r27, 0x01	; 1
     264:	01 c0       	rjmp	.+2      	; 0x268 <.do_clear_bss_start>

00000266 <.do_clear_bss_loop>:
     266:	1d 92       	st	X+, r1

00000268 <.do_clear_bss_start>:
     268:	a9 31       	cpi	r26, 0x19	; 25
     26a:	b2 07       	cpc	r27, r18
     26c:	e1 f7       	brne	.-8      	; 0x266 <.do_clear_bss_loop>
     26e:	07 d2       	rcall	.+1038   	; 0x67e <main>
     270:	13 c7       	rjmp	.+3622   	; 0x1098 <_exit>

00000272 <__bad_interrupt>:
     272:	c6 ce       	rjmp	.-628    	; 0x0 <__vectors>

00000274 <send_spoof_header>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     274:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     278:	85 ff       	sbrs	r24, 5
     27a:	fc cf       	rjmp	.-8      	; 0x274 <send_spoof_header>
				UDR1 = DataByte;
     27c:	84 e4       	ldi	r24, 0x44	; 68
     27e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
}

static inline void send_spoof_header(void)
{
  Serial_SendByte(BYTE_CONTROL_DATA);
  if( USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST )
     282:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <USB_ControlRequest>
     286:	87 ff       	sbrs	r24, 7
     288:	06 c0       	rjmp	.+12     	; 0x296 <send_spoof_header+0x22>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     28a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     28e:	85 ff       	sbrs	r24, 5
     290:	fc cf       	rjmp	.-8      	; 0x28a <send_spoof_header+0x16>
				UDR1 = DataByte;
     292:	88 e0       	ldi	r24, 0x08	; 8
     294:	07 c0       	rjmp	.+14     	; 0x2a4 <send_spoof_header+0x30>
  {
    Serial_SendByte(sizeof(USB_ControlRequest));
  }
  else
  {
    Serial_SendByte(sizeof(USB_ControlRequest) + (USB_ControlRequest.wLength & 0xFF));
     296:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <USB_ControlRequest+0x6>
     29a:	88 5f       	subi	r24, 0xF8	; 248
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     29c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2a0:	95 ff       	sbrs	r25, 5
     2a2:	fc cf       	rjmp	.-8      	; 0x29c <send_spoof_header+0x28>
				UDR1 = DataByte;
     2a4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  }
  Serial_SendData(&USB_ControlRequest, sizeof(USB_ControlRequest));
     2a8:	68 e0       	ldi	r22, 0x08	; 8
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	81 e1       	ldi	r24, 0x11	; 17
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	d4 c6       	rjmp	.+3496   	; 0x105a <Serial_SendData>

000002b2 <forceHardReset>:
static volatile unsigned char spoofReplyLen = 0;

void forceHardReset(void)
{
  LEDs_TurnOnLEDs(LEDS_ALL_LEDS);
  cli(); // disable interrupts
     2b2:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     2b4:	98 e0       	ldi	r25, 0x08	; 8
     2b6:	88 e1       	ldi	r24, 0x18	; 24
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	a8 95       	wdr
     2be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <forceHardReset+0x16>

000002ca <__vector_25>:
}

static unsigned char buf[MAX_CONTROL_TRANSFER_SIZE];

ISR(USART1_RX_vect)
{
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	2f 93       	push	r18
     2d6:	3f 93       	push	r19
     2d8:	4f 93       	push	r20
     2da:	5f 93       	push	r21
     2dc:	6f 93       	push	r22
     2de:	7f 93       	push	r23
     2e0:	8f 93       	push	r24
     2e2:	9f 93       	push	r25
     2e4:	af 93       	push	r26
     2e6:	bf 93       	push	r27
     2e8:	ef 93       	push	r30
     2ea:	ff 93       	push	r31
  packet_type = UDR1;
     2ec:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2f0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <packet_type>
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
     2f4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  while(1); // wait for watchdog to reset processor
}

static inline int16_t Serial_BlockingReceiveByte(void)
{
  while(!Serial_IsCharReceived());
     2f8:	87 ff       	sbrs	r24, 7
     2fa:	fc cf       	rjmp	.-8      	; 0x2f4 <__vector_25+0x2a>
  return UDR1;
     2fc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
static unsigned char buf[MAX_CONTROL_TRANSFER_SIZE];

ISR(USART1_RX_vect)
{
  packet_type = UDR1;
  value_len = Serial_BlockingReceiveByte();
     300:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <value_len>
  if(packet_type == BYTE_IN_REPORT)
     304:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <packet_type>
     308:	8f 3f       	cpi	r24, 0xFF	; 255
     30a:	19 f4       	brne	.+6      	; 0x312 <__vector_25+0x48>
  {
    pdata = report;
     30c:	82 e4       	ldi	r24, 0x42	; 66
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	02 c0       	rjmp	.+4      	; 0x316 <__vector_25+0x4c>
  }
  else
  {
    pdata = buf;
     312:	82 ec       	ldi	r24, 0xC2	; 194
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <pdata+0x1>
     31a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <pdata>
  }
  while(i < value_len)
  {
    pdata[i++] = Serial_BlockingReceiveByte();
     31e:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <pdata>
     322:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <pdata+0x1>
  }
  else
  {
    pdata = buf;
  }
  while(i < value_len)
     326:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <i>
     32a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <value_len>
     32e:	89 17       	cp	r24, r25
     330:	78 f4       	brcc	.+30     	; 0x350 <__vector_25+0x86>
  {
    pdata[i++] = Serial_BlockingReceiveByte();
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	98 0f       	add	r25, r24
     336:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <i>
     33a:	f9 01       	movw	r30, r18
     33c:	e8 0f       	add	r30, r24
     33e:	f1 1d       	adc	r31, r1
     340:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  while(1); // wait for watchdog to reset processor
}

static inline int16_t Serial_BlockingReceiveByte(void)
{
  while(!Serial_IsCharReceived());
     344:	87 ff       	sbrs	r24, 7
     346:	fc cf       	rjmp	.-8      	; 0x340 <__vector_25+0x76>
  return UDR1;
     348:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  {
    pdata = buf;
  }
  while(i < value_len)
  {
    pdata[i++] = Serial_BlockingReceiveByte();
     34c:	80 83       	st	Z, r24
     34e:	eb cf       	rjmp	.-42     	; 0x326 <__vector_25+0x5c>
  }
  i = 0;
     350:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <i>
  Serial_SendData(&USB_ControlRequest, sizeof(USB_ControlRequest));
}

static inline void handle_packet(void)
{
  switch(packet_type)
     354:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <packet_type>
     358:	83 33       	cpi	r24, 0x33	; 51
     35a:	09 f4       	brne	.+2      	; 0x35e <__vector_25+0x94>
     35c:	42 c0       	rjmp	.+132    	; 0x3e2 <__vector_25+0x118>
     35e:	28 f4       	brcc	.+10     	; 0x36a <__vector_25+0xa0>
     360:	81 31       	cpi	r24, 0x11	; 17
     362:	a1 f0       	breq	.+40     	; 0x38c <__vector_25+0xc2>
     364:	82 32       	cpi	r24, 0x22	; 34
     366:	31 f1       	breq	.+76     	; 0x3b4 <__vector_25+0xea>
     368:	5a c0       	rjmp	.+180    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     36a:	85 35       	cpi	r24, 0x55	; 85
     36c:	09 f4       	brne	.+2      	; 0x370 <__vector_25+0xa6>
     36e:	53 c0       	rjmp	.+166    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     370:	8f 3f       	cpi	r24, 0xFF	; 255
     372:	09 f4       	brne	.+2      	; 0x376 <__vector_25+0xac>
     374:	51 c0       	rjmp	.+162    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     376:	84 34       	cpi	r24, 0x44	; 68
     378:	09 f0       	breq	.+2      	; 0x37c <__vector_25+0xb2>
     37a:	51 c0       	rjmp	.+162    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
      Serial_SendByte(BYTE_LEN_1_BYTE);
      Serial_SendByte(started);
      started = 1;
      break;
    case BYTE_CONTROL_DATA:
      spoofReply = 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <spoofReply>
      spoofReplyLen = value_len;
     382:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <value_len>
     386:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <spoofReplyLen>
     38a:	49 c0       	rjmp	.+146    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     38c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     390:	85 ff       	sbrs	r24, 5
     392:	fc cf       	rjmp	.-8      	; 0x38c <__vector_25+0xc2>
				UDR1 = DataByte;
     394:	81 e1       	ldi	r24, 0x11	; 17
     396:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     39a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     39e:	85 ff       	sbrs	r24, 5
     3a0:	fc cf       	rjmp	.-8      	; 0x39a <__vector_25+0xd0>
				UDR1 = DataByte;
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3a8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3ac:	85 ff       	sbrs	r24, 5
     3ae:	fc cf       	rjmp	.-8      	; 0x3a8 <__vector_25+0xde>
				UDR1 = DataByte;
     3b0:	85 e0       	ldi	r24, 0x05	; 5
     3b2:	14 c0       	rjmp	.+40     	; 0x3dc <__vector_25+0x112>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3b4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3b8:	85 ff       	sbrs	r24, 5
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <__vector_25+0xea>
				UDR1 = DataByte;
     3bc:	82 e2       	ldi	r24, 0x22	; 34
     3be:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3c2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3c6:	85 ff       	sbrs	r24, 5
     3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <__vector_25+0xf8>
				UDR1 = DataByte;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
      Serial_SendByte(BYTE_TYPE_DS4);
      break;
    case BYTE_STATUS:
      Serial_SendByte(BYTE_STATUS);
      Serial_SendByte(BYTE_LEN_1_BYTE);
      Serial_SendByte(started);
     3d0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <started>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3d4:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3d8:	95 ff       	sbrs	r25, 5
     3da:	fc cf       	rjmp	.-8      	; 0x3d4 <__vector_25+0x10a>
				UDR1 = DataByte;
     3dc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     3e0:	1e c0       	rjmp	.+60     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3e2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3e6:	85 ff       	sbrs	r24, 5
     3e8:	fc cf       	rjmp	.-8      	; 0x3e2 <__vector_25+0x118>
				UDR1 = DataByte;
     3ea:	83 e3       	ldi	r24, 0x33	; 51
     3ec:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3f0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3f4:	85 ff       	sbrs	r24, 5
     3f6:	fc cf       	rjmp	.-8      	; 0x3f0 <__vector_25+0x126>
				UDR1 = DataByte;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
      break;
    case BYTE_START:
      Serial_SendByte(BYTE_START);
      Serial_SendByte(BYTE_LEN_1_BYTE);
      Serial_SendByte(started);
     3fe:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <started>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     402:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     406:	95 ff       	sbrs	r25, 5
     408:	fc cf       	rjmp	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				UDR1 = DataByte;
     40a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
      started = 1;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <started>
     414:	04 c0       	rjmp	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
    case BYTE_CONTROL_DATA:
      spoofReply = 1;
      spoofReplyLen = value_len;
      break;
    case BYTE_RESET:
      forceHardReset();
     416:	4d df       	rcall	.-358    	; 0x2b2 <forceHardReset>
      break;
    case BYTE_IN_REPORT:
      sendReport = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <sendReport>
  {
    pdata[i++] = Serial_BlockingReceiveByte();
  }
  i = 0;
  handle_packet();
}
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	5f 91       	pop	r21
     430:	4f 91       	pop	r20
     432:	3f 91       	pop	r19
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <serial_init>:
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     448:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     44c:	86 e0       	ldi	r24, 0x06	; 6
     44e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     452:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     456:	e9 ec       	ldi	r30, 0xC9	; 201
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	88 e1       	ldi	r24, 0x18	; 24
     45c:	80 83       	st	Z, r24

				DDRD  |= (1 << 3);
     45e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     460:	5a 9a       	sbi	0x0b, 2	; 11

void serial_init(void)
{
  Serial_Init(USART_BAUDRATE, USART_DOUBLE_SPEED);

  UCSR1B |= (1 << RXCIE1); // Enable the USART Receive Complete interrupt (USART_RXC)
     462:	80 81       	ld	r24, Z
     464:	80 68       	ori	r24, 0x80	; 128
     466:	80 83       	st	Z, r24
     468:	08 95       	ret

0000046a <SetupHardware>:
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
  MCUSR = 0;
     46a:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	a8 95       	wdr
     472:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     476:	88 61       	ori	r24, 0x18	; 24
     478:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     47c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     480:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	80 e8       	ldi	r24, 0x80	; 128
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     48e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     492:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

  serial_init();
     494:	d5 df       	rcall	.-86     	; 0x440 <serial_init>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     496:	78 94       	sei
  GlobalInterruptEnable();

	/* Hardware Initialization */
	LEDs_Init();

  while(!started);
     498:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <started>
     49c:	88 23       	and	r24, r24

  USB_Init();
     49e:	e1 f3       	breq	.-8      	; 0x498 <SetupHardware+0x2e>
     4a0:	91 c3       	rjmp	.+1826   	; 0xbc4 <USB_Init>

000004a2 <EVENT_USB_Device_Connect>:
     4a2:	08 95       	ret

000004a4 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs.
 */
void EVENT_USB_Device_Disconnect(void)
{
     4a4:	08 95       	ret

000004a6 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     4a6:	42 e3       	ldi	r20, 0x32	; 50
     4a8:	61 ec       	ldi	r22, 0xC1	; 193
     4aa:	84 e0       	ldi	r24, 0x04	; 4
     4ac:	c4 d2       	rcall	.+1416   	; 0xa36 <Endpoint_ConfigureEndpoint_Prv>
     4ae:	42 e3       	ldi	r20, 0x32	; 50
     4b0:	60 ec       	ldi	r22, 0xC0	; 192
     4b2:	83 e0       	ldi	r24, 0x03	; 3
     4b4:	c0 c2       	rjmp	.+1408   	; 0xa36 <Endpoint_ConfigureEndpoint_Prv>

000004b6 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     4b6:	cf 93       	push	r28
  static unsigned char buffer[MAX_CONTROL_TRANSFER_SIZE];
  unsigned char len = 0;

  /* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
     4b8:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <USB_ControlRequest+0x1>
     4bc:	c1 30       	cpi	r28, 0x01	; 1
     4be:	21 f0       	breq	.+8      	; 0x4c8 <EVENT_USB_Device_ControlRequest+0x12>
     4c0:	c9 30       	cpi	r28, 0x09	; 9
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <EVENT_USB_Device_ControlRequest+0x10>
     4c4:	59 c0       	rjmp	.+178    	; 0x578 <EVENT_USB_Device_ControlRequest+0xc2>
     4c6:	7d c0       	rjmp	.+250    	; 0x5c2 <EVENT_USB_Device_ControlRequest+0x10c>
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     4c8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <USB_ControlRequest>
     4cc:	81 3a       	cpi	r24, 0xA1	; 161
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <EVENT_USB_Device_ControlRequest+0x1c>
     4d0:	78 c0       	rjmp	.+240    	; 0x5c2 <EVENT_USB_Device_ControlRequest+0x10c>
			{
			  if(USB_ControlRequest.wValue == 0x0303)
     4d2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <USB_ControlRequest+0x2>
     4d6:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <USB_ControlRequest+0x3>
     4da:	83 30       	cpi	r24, 0x03	; 3
     4dc:	23 e0       	ldi	r18, 0x03	; 3
     4de:	92 07       	cpc	r25, r18
     4e0:	c9 f4       	brne	.+50     	; 0x514 <EVENT_USB_Device_ControlRequest+0x5e>
        {
          memcpy_P(buffer, buf03, sizeof(buf03));
     4e2:	40 e3       	ldi	r20, 0x30	; 48
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 ec       	ldi	r22, 0xC0	; 192
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	82 e8       	ldi	r24, 0x82	; 130
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	cb d5       	rcall	.+2966   	; 0x1086 <memcpy_P>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     4f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4f4:	87 7f       	andi	r24, 0xF7	; 247
     4f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
          len = sizeof(buf03);
          Endpoint_ClearSETUP();
          Endpoint_Write_Control_Stream_LE(buffer, len);
     4fa:	60 e3       	ldi	r22, 0x30	; 48
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	82 e8       	ldi	r24, 0x82	; 130
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	96 d1       	rcall	.+812    	; 0x830 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     504:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     508:	8b 77       	andi	r24, 0x7B	; 123
     50a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
          Endpoint_ClearOUT();
          ready = 1;
     50e:	c0 93 0b 02 	sts	0x020B, r28	; 0x80020b <ready>
     512:	57 c0       	rjmp	.+174    	; 0x5c2 <EVENT_USB_Device_ControlRequest+0x10c>
        }
        else if(USB_ControlRequest.wValue == 0x03f3)
     514:	83 3f       	cpi	r24, 0xF3	; 243
     516:	23 e0       	ldi	r18, 0x03	; 3
     518:	92 07       	cpc	r25, r18
     51a:	89 f4       	brne	.+34     	; 0x53e <EVENT_USB_Device_ControlRequest+0x88>
        {
          memcpy_P(buffer, buff3, sizeof(buff3));
     51c:	48 e0       	ldi	r20, 0x08	; 8
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	60 ef       	ldi	r22, 0xF0	; 240
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	82 e8       	ldi	r24, 0x82	; 130
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	ae d5       	rcall	.+2908   	; 0x1086 <memcpy_P>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     52a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     52e:	87 7f       	andi	r24, 0xF7	; 247
     530:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
          len = sizeof(buff3);
          Endpoint_ClearSETUP();
          Endpoint_Write_Control_Stream_LE(buffer, len);
     534:	68 e0       	ldi	r22, 0x08	; 8
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	82 e8       	ldi	r24, 0x82	; 130
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	16 c0       	rjmp	.+44     	; 0x56a <EVENT_USB_Device_ControlRequest+0xb4>
          Endpoint_ClearOUT();
        }
        else if(USB_ControlRequest.wValue == 0x03f1
     53e:	81 5f       	subi	r24, 0xF1	; 241
     540:	93 40       	sbci	r25, 0x03	; 3
     542:	02 97       	sbiw	r24, 0x02	; 2
     544:	08 f0       	brcs	.+2      	; 0x548 <EVENT_USB_Device_ControlRequest+0x92>
             || USB_ControlRequest.wValue == 0x03f2)
        {
          spoofReply = 0;
     546:	3d c0       	rjmp	.+122    	; 0x5c2 <EVENT_USB_Device_ControlRequest+0x10c>
     548:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <spoofReply>
          send_spoof_header();
     54c:	93 de       	rcall	.-730    	; 0x274 <send_spoof_header>
          while(!spoofReply);
     54e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <spoofReply>
     552:	88 23       	and	r24, r24
     554:	e1 f3       	breq	.-8      	; 0x54e <EVENT_USB_Device_ControlRequest+0x98>
     556:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     55a:	87 7f       	andi	r24, 0xF7	; 247
     55c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
          Endpoint_ClearSETUP();
          Endpoint_Write_Control_Stream_LE(buf, spoofReplyLen);
     560:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <spoofReplyLen>
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	82 ec       	ldi	r24, 0xC2	; 194
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	62 d1       	rcall	.+708    	; 0x830 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     56c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     570:	8b 77       	andi	r24, 0x7B	; 123
     572:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     576:	25 c0       	rjmp	.+74     	; 0x5c2 <EVENT_USB_Device_ControlRequest+0x10c>
        }
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     578:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <USB_ControlRequest>
     57c:	81 32       	cpi	r24, 0x21	; 33
     57e:	09 f5       	brne	.+66     	; 0x5c2 <EVENT_USB_Device_ControlRequest+0x10c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     580:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     584:	87 7f       	andi	r24, 0xF7	; 247
     586:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
        Endpoint_ClearSETUP();
        Endpoint_Read_Control_Stream_LE(buffer, USB_ControlRequest.wLength);
     58a:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <USB_ControlRequest+0x6>
     58e:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <USB_ControlRequest+0x7>
     592:	82 e8       	ldi	r24, 0x82	; 130
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	ad d1       	rcall	.+858    	; 0x8f2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     598:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     59c:	8e 77       	andi	r24, 0x7E	; 126
     59e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_ClearIN();

        if(USB_ControlRequest.wValue == 0x03f0)
     5a2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <USB_ControlRequest+0x2>
     5a6:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <USB_ControlRequest+0x3>
     5aa:	80 3f       	cpi	r24, 0xF0	; 240
     5ac:	93 40       	sbci	r25, 0x03	; 3
        {
          send_spoof_header();
     5ae:	49 f4       	brne	.+18     	; 0x5c2 <EVENT_USB_Device_ControlRequest+0x10c>
     5b0:	61 de       	rcall	.-830    	; 0x274 <send_spoof_header>
          Serial_SendData(buffer, USB_ControlRequest.wLength);
     5b2:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <USB_ControlRequest+0x6>
     5b6:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <USB_ControlRequest+0x7>
     5ba:	82 e8       	ldi	r24, 0x82	; 130
        }
			}
			
			break;
	}
}
     5bc:	91 e0       	ldi	r25, 0x01	; 1
        Endpoint_ClearIN();

        if(USB_ControlRequest.wValue == 0x03f0)
        {
          send_spoof_header();
          Serial_SendData(buffer, USB_ControlRequest.wLength);
     5be:	cf 91       	pop	r28
     5c0:	4c c5       	rjmp	.+2712   	; 0x105a <Serial_SendData>
        }
			}
			
			break;
	}
}
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <SendNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5c6:	84 e0       	ldi	r24, 0x04	; 4
     5c8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
void SendNextReport(void)
{
	/* Select the IN Report Endpoint */
	Endpoint_SelectEndpoint(IN_EPNUM);

  if (ready && sendReport)
     5cc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <ready>
     5d0:	88 23       	and	r24, r24
     5d2:	b1 f0       	breq	.+44     	; 0x600 <SendNextReport+0x3a>
     5d4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <sendReport>
     5d8:	88 23       	and	r24, r24
     5da:	91 f0       	breq	.+36     	; 0x600 <SendNextReport+0x3a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
  {
    /* Wait until the host is ready to accept another packet */
    while (!Endpoint_IsINReady()) {}
     5e0:	80 ff       	sbrs	r24, 0
     5e2:	fc cf       	rjmp	.-8      	; 0x5dc <SendNextReport+0x16>

		/* Write IN Report Data */
		Endpoint_Write_Stream_LE(report, sizeof(report), NULL);
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	60 e4       	ldi	r22, 0x40	; 64
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	82 e4       	ldi	r24, 0x42	; 66
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	8b d0       	rcall	.+278    	; 0x708 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5f6:	8e 77       	andi	r24, 0x7E	; 126
     5f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

    sendReport = 0;
     5fc:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sendReport>
     600:	08 95       	ret

00000602 <ReceiveNextReport>:
	}
}

/** Reads the next OUT report from the host from the OUT endpoint, if one has been sent. */
void ReceiveNextReport(void)
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	00 d0       	rcall	.+0      	; 0x608 <ReceiveNextReport+0x6>
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
      unsigned char length;
    } header;
    unsigned char buffer[EPSIZE];
  } packet = { .header.type = BYTE_OUT_REPORT };

  uint16_t length = 0;
     60c:	1a 82       	std	Y+2, r1	; 0x02
     60e:	19 82       	std	Y+1, r1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     616:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the OUT Report Endpoint */
	Endpoint_SelectEndpoint(OUT_EPNUM);

	/* Check if OUT Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
     61a:	82 ff       	sbrs	r24, 2
     61c:	24 c0       	rjmp	.+72     	; 0x666 <ReceiveNextReport+0x64>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     61e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
     622:	85 ff       	sbrs	r24, 5
     624:	0e c0       	rjmp	.+28     	; 0x642 <ReceiveNextReport+0x40>
		{
      /* Read OUT Report Data */
      uint8_t ErrorCode = Endpoint_Read_Stream_LE(packet.buffer, sizeof(packet.buffer), &length);
     626:	ae 01       	movw	r20, r28
     628:	4f 5f       	subi	r20, 0xFF	; 255
     62a:	5f 4f       	sbci	r21, 0xFF	; 255
     62c:	60 e4       	ldi	r22, 0x40	; 64
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	b3 d0       	rcall	.+358    	; 0x79c <Endpoint_Read_Stream_LE>
      if(ErrorCode == ENDPOINT_RWSTREAM_NoError)
     636:	81 11       	cpse	r24, r1
     638:	04 c0       	rjmp	.+8      	; 0x642 <ReceiveNextReport+0x40>
      {
        length = sizeof(packet.buffer);
     63a:	80 e4       	ldi	r24, 0x40	; 64
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	9a 83       	std	Y+2, r25	; 0x02
     640:	89 83       	std	Y+1, r24	; 0x01
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     642:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     646:	8b 77       	andi	r24, 0x7B	; 123
     648:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}

		/* Handshake the OUT Endpoint - clear endpoint and ready for next report */
		Endpoint_ClearOUT();

		if(length)
     64c:	69 81       	ldd	r22, Y+1	; 0x01
     64e:	7a 81       	ldd	r23, Y+2	; 0x02
     650:	61 15       	cp	r22, r1
     652:	71 05       	cpc	r23, r1
     654:	41 f0       	breq	.+16     	; 0x666 <ReceiveNextReport+0x64>
		{
		  packet.header.length = length & 0xFF;
     656:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <__data_start+0x1>
      Serial_SendData(&packet, sizeof(packet.header) + packet.header.length);
     65a:	77 27       	eor	r23, r23
     65c:	6e 5f       	subi	r22, 0xFE	; 254
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	fa d4       	rcall	.+2548   	; 0x105a <Serial_SendData>
		}
	}
}
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <HID_Task>:

/** Function to manage HID report generation and transmission to the host, when in report mode. */
void HID_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     670:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>
     674:	84 30       	cpi	r24, 0x04	; 4
     676:	11 f4       	brne	.+4      	; 0x67c <HID_Task+0xc>
	  return;

  /* Send the next keypress report to the host */
	SendNextReport();
     678:	a6 df       	rcall	.-180    	; 0x5c6 <SendNextReport>

	/* Process the LED report sent from the host */
	ReceiveNextReport();
     67a:	c3 cf       	rjmp	.-122    	; 0x602 <ReceiveNextReport>
     67c:	08 95       	ret

0000067e <main>:
     67e:	f5 de       	rcall	.-534    	; 0x46a <SetupHardware>
{
  SetupHardware();

  for (;;)
  {
    HID_Task();
     680:	f7 df       	rcall	.-18     	; 0x670 <HID_Task>
    USB_USBTask();
     682:	d1 d4       	rcall	.+2466   	; 0x1026 <USB_USBTask>
     684:	fd cf       	rjmp	.-6      	; 0x680 <main+0x2>

00000686 <CALLBACK_USB_GetDescriptor>:
     686:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     688:	33 27       	eor	r19, r19
     68a:	23 30       	cpi	r18, 0x03	; 3
     68c:	31 05       	cpc	r19, r1
     68e:	e1 f0       	breq	.+56     	; 0x6c8 <CALLBACK_USB_GetDescriptor+0x42>
     690:	58 f4       	brcc	.+22     	; 0x6a8 <CALLBACK_USB_GetDescriptor+0x22>
     692:	21 30       	cpi	r18, 0x01	; 1
     694:	31 05       	cpc	r19, r1
     696:	99 f0       	breq	.+38     	; 0x6be <CALLBACK_USB_GetDescriptor+0x38>
     698:	22 30       	cpi	r18, 0x02	; 2
     69a:	31 05       	cpc	r19, r1
     69c:	69 f5       	brne	.+90     	; 0x6f8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     69e:	89 e2       	ldi	r24, 0x29	; 41
     6a0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
     6a2:	20 e6       	ldi	r18, 0x60	; 96
     6a4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     6a6:	2c c0       	rjmp	.+88     	; 0x700 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     6a8:	21 32       	cpi	r18, 0x21	; 33
     6aa:	31 05       	cpc	r19, r1
     6ac:	01 f1       	breq	.+64     	; 0x6ee <CALLBACK_USB_GetDescriptor+0x68>
     6ae:	22 32       	cpi	r18, 0x22	; 34
     6b0:	31 05       	cpc	r19, r1
     6b2:	11 f5       	brne	.+68     	; 0x6f8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = (void*)&ConfigurationDescriptor.HID;
			Size    = sizeof(USB_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = (void*)&Report;
			Size    = sizeof(Report);
     6b4:	80 ea       	ldi	r24, 0xA0	; 160
     6b6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = (void*)&ConfigurationDescriptor.HID;
			Size    = sizeof(USB_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = (void*)&Report;
     6b8:	2b e9       	ldi	r18, 0x9B	; 155
     6ba:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(Report);
			break;
     6bc:	21 c0       	rjmp	.+66     	; 0x700 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     6be:	82 e1       	ldi	r24, 0x12	; 18
     6c0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
     6c2:	29 e8       	ldi	r18, 0x89	; 137
     6c4:	31 e0       	ldi	r19, 0x01	; 1
     6c6:	1c c0       	rjmp	.+56     	; 0x700 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
     6c8:	99 27       	eor	r25, r25
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	91 05       	cpc	r25, r1
     6ce:	49 f0       	breq	.+18     	; 0x6e2 <CALLBACK_USB_GetDescriptor+0x5c>
     6d0:	28 f0       	brcs	.+10     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x56>
     6d2:	02 97       	sbiw	r24, 0x02	; 2
     6d4:	89 f4       	brne	.+34     	; 0x6f8 <CALLBACK_USB_GetDescriptor+0x72>
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6d6:	e8 ef       	ldi	r30, 0xF8	; 248
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	05 c0       	rjmp	.+10     	; 0x6e6 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String: 
			switch (DescriptorNumber)
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6dc:	ec e5       	ldi	r30, 0x5C	; 92
     6de:	f1 e0       	ldi	r31, 0x01	; 1
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6e2:	e2 e2       	ldi	r30, 0x22	; 34
     6e4:	f1 e0       	ldi	r31, 0x01	; 1
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6e6:	84 91       	lpm	r24, Z
     6e8:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
     6ea:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     6ec:	09 c0       	rjmp	.+18     	; 0x700 <CALLBACK_USB_GetDescriptor+0x7a>
			}
			break;
		case DTYPE_HID:
			Address = (void*)&ConfigurationDescriptor.HID;
			Size    = sizeof(USB_Descriptor_HID_t);
     6ee:	89 e0       	ldi	r24, 0x09	; 9
     6f0:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
			}
			break;
		case DTYPE_HID:
			Address = (void*)&ConfigurationDescriptor.HID;
     6f2:	22 e7       	ldi	r18, 0x72	; 114
     6f4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_HID_t);
			break;
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
			Address = (void*)&Report;
			Size    = sizeof(Report);
			break;
	}
	
	*DescriptorAddress = Address;
     700:	fa 01       	movw	r30, r20
     702:	31 83       	std	Z+1, r19	; 0x01
     704:	20 83       	st	Z, r18
	return Size;
}
     706:	08 95       	ret

00000708 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	ec 01       	movw	r28, r24
     71a:	8b 01       	movw	r16, r22
     71c:	7a 01       	movw	r14, r20
     71e:	df d1       	rcall	.+958    	; 0xade <Endpoint_WaitUntilReady>
     720:	81 11       	cpse	r24, r1
     722:	33 c0       	rjmp	.+102    	; 0x78a <Endpoint_Write_Stream_LE+0x82>
     724:	e1 14       	cp	r14, r1
     726:	f1 04       	cpc	r15, r1
     728:	39 f0       	breq	.+14     	; 0x738 <Endpoint_Write_Stream_LE+0x30>
     72a:	f7 01       	movw	r30, r14
     72c:	80 81       	ld	r24, Z
     72e:	91 81       	ldd	r25, Z+1	; 0x01
     730:	08 1b       	sub	r16, r24
     732:	19 0b       	sbc	r17, r25
     734:	c8 0f       	add	r28, r24
     736:	d9 1f       	adc	r29, r25
     738:	c1 2c       	mov	r12, r1
     73a:	d1 2c       	mov	r13, r1
     73c:	01 15       	cp	r16, r1
     73e:	11 05       	cpc	r17, r1
     740:	19 f1       	breq	.+70     	; 0x788 <Endpoint_Write_Stream_LE+0x80>
     742:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     746:	85 fd       	sbrc	r24, 5
     748:	16 c0       	rjmp	.+44     	; 0x776 <Endpoint_Write_Stream_LE+0x6e>
     74a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     74e:	8e 77       	andi	r24, 0x7E	; 126
     750:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     754:	68 d4       	rcall	.+2256   	; 0x1026 <USB_USBTask>
     756:	e1 14       	cp	r14, r1
     758:	f1 04       	cpc	r15, r1
     75a:	49 f0       	breq	.+18     	; 0x76e <Endpoint_Write_Stream_LE+0x66>
     75c:	f7 01       	movw	r30, r14
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	c8 0e       	add	r12, r24
     764:	d9 1e       	adc	r13, r25
     766:	d1 82       	std	Z+1, r13	; 0x01
     768:	c0 82       	st	Z, r12
     76a:	85 e0       	ldi	r24, 0x05	; 5
     76c:	0e c0       	rjmp	.+28     	; 0x78a <Endpoint_Write_Stream_LE+0x82>
     76e:	b7 d1       	rcall	.+878    	; 0xade <Endpoint_WaitUntilReady>
     770:	88 23       	and	r24, r24
     772:	21 f3       	breq	.-56     	; 0x73c <Endpoint_Write_Stream_LE+0x34>
     774:	0a c0       	rjmp	.+20     	; 0x78a <Endpoint_Write_Stream_LE+0x82>
     776:	89 91       	ld	r24, Y+
     778:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     77c:	01 50       	subi	r16, 0x01	; 1
     77e:	11 09       	sbc	r17, r1
     780:	ff ef       	ldi	r31, 0xFF	; 255
     782:	cf 1a       	sub	r12, r31
     784:	df 0a       	sbc	r13, r31
     786:	da cf       	rjmp	.-76     	; 0x73c <Endpoint_Write_Stream_LE+0x34>
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	08 95       	ret

0000079c <Endpoint_Read_Stream_LE>:
     79c:	cf 92       	push	r12
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
     7ae:	8b 01       	movw	r16, r22
     7b0:	7a 01       	movw	r14, r20
     7b2:	95 d1       	rcall	.+810    	; 0xade <Endpoint_WaitUntilReady>
     7b4:	81 11       	cpse	r24, r1
     7b6:	33 c0       	rjmp	.+102    	; 0x81e <Endpoint_Read_Stream_LE+0x82>
     7b8:	e1 14       	cp	r14, r1
     7ba:	f1 04       	cpc	r15, r1
     7bc:	39 f0       	breq	.+14     	; 0x7cc <Endpoint_Read_Stream_LE+0x30>
     7be:	f7 01       	movw	r30, r14
     7c0:	80 81       	ld	r24, Z
     7c2:	91 81       	ldd	r25, Z+1	; 0x01
     7c4:	08 1b       	sub	r16, r24
     7c6:	19 0b       	sbc	r17, r25
     7c8:	c8 0f       	add	r28, r24
     7ca:	d9 1f       	adc	r29, r25
     7cc:	c1 2c       	mov	r12, r1
     7ce:	d1 2c       	mov	r13, r1
     7d0:	01 15       	cp	r16, r1
     7d2:	11 05       	cpc	r17, r1
     7d4:	19 f1       	breq	.+70     	; 0x81c <Endpoint_Read_Stream_LE+0x80>
     7d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7da:	85 fd       	sbrc	r24, 5
     7dc:	16 c0       	rjmp	.+44     	; 0x80a <Endpoint_Read_Stream_LE+0x6e>
     7de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7e2:	8b 77       	andi	r24, 0x7B	; 123
     7e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7e8:	1e d4       	rcall	.+2108   	; 0x1026 <USB_USBTask>
     7ea:	e1 14       	cp	r14, r1
     7ec:	f1 04       	cpc	r15, r1
     7ee:	49 f0       	breq	.+18     	; 0x802 <Endpoint_Read_Stream_LE+0x66>
     7f0:	f7 01       	movw	r30, r14
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	c8 0e       	add	r12, r24
     7f8:	d9 1e       	adc	r13, r25
     7fa:	d1 82       	std	Z+1, r13	; 0x01
     7fc:	c0 82       	st	Z, r12
     7fe:	85 e0       	ldi	r24, 0x05	; 5
     800:	0e c0       	rjmp	.+28     	; 0x81e <Endpoint_Read_Stream_LE+0x82>
     802:	6d d1       	rcall	.+730    	; 0xade <Endpoint_WaitUntilReady>
     804:	88 23       	and	r24, r24
     806:	21 f3       	breq	.-56     	; 0x7d0 <Endpoint_Read_Stream_LE+0x34>
     808:	0a c0       	rjmp	.+20     	; 0x81e <Endpoint_Read_Stream_LE+0x82>
     80a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     80e:	89 93       	st	Y+, r24
     810:	01 50       	subi	r16, 0x01	; 1
     812:	11 09       	sbc	r17, r1
     814:	ff ef       	ldi	r31, 0xFF	; 255
     816:	cf 1a       	sub	r12, r31
     818:	df 0a       	sbc	r13, r31
     81a:	da cf       	rjmp	.-76     	; 0x7d0 <Endpoint_Read_Stream_LE+0x34>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	08 95       	ret

00000830 <Endpoint_Write_Control_Stream_LE>:
     830:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <USB_ControlRequest+0x6>
     834:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <USB_ControlRequest+0x7>
     838:	26 17       	cp	r18, r22
     83a:	37 07       	cpc	r19, r23
     83c:	48 f0       	brcs	.+18     	; 0x850 <Endpoint_Write_Control_Stream_LE+0x20>
     83e:	61 15       	cp	r22, r1
     840:	71 05       	cpc	r23, r1
     842:	39 f4       	brne	.+14     	; 0x852 <Endpoint_Write_Control_Stream_LE+0x22>
     844:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     848:	2e 77       	andi	r18, 0x7E	; 126
     84a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     84e:	01 c0       	rjmp	.+2      	; 0x852 <Endpoint_Write_Control_Stream_LE+0x22>
     850:	b9 01       	movw	r22, r18
     852:	fc 01       	movw	r30, r24
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	61 15       	cp	r22, r1
     858:	71 05       	cpc	r23, r1
     85a:	91 f1       	breq	.+100    	; 0x8c0 <Endpoint_Write_Control_Stream_LE+0x90>
     85c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>
     860:	88 23       	and	r24, r24
     862:	09 f4       	brne	.+2      	; 0x866 <Endpoint_Write_Control_Stream_LE+0x36>
     864:	40 c0       	rjmp	.+128    	; 0x8e6 <Endpoint_Write_Control_Stream_LE+0xb6>
     866:	85 30       	cpi	r24, 0x05	; 5
     868:	09 f4       	brne	.+2      	; 0x86c <Endpoint_Write_Control_Stream_LE+0x3c>
     86a:	3f c0       	rjmp	.+126    	; 0x8ea <Endpoint_Write_Control_Stream_LE+0xba>
     86c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     870:	83 fd       	sbrc	r24, 3
     872:	3d c0       	rjmp	.+122    	; 0x8ee <Endpoint_Write_Control_Stream_LE+0xbe>
     874:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     878:	82 fd       	sbrc	r24, 2
     87a:	2f c0       	rjmp	.+94     	; 0x8da <Endpoint_Write_Control_Stream_LE+0xaa>
     87c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     880:	80 ff       	sbrs	r24, 0
     882:	e9 cf       	rjmp	.-46     	; 0x856 <Endpoint_Write_Control_Stream_LE+0x26>
     884:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     888:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	92 2b       	or	r25, r18
     890:	61 15       	cp	r22, r1
     892:	71 05       	cpc	r23, r1
     894:	51 f0       	breq	.+20     	; 0x8aa <Endpoint_Write_Control_Stream_LE+0x7a>
     896:	80 34       	cpi	r24, 0x40	; 64
     898:	91 05       	cpc	r25, r1
     89a:	38 f4       	brcc	.+14     	; 0x8aa <Endpoint_Write_Control_Stream_LE+0x7a>
     89c:	21 91       	ld	r18, Z+
     89e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8a2:	61 50       	subi	r22, 0x01	; 1
     8a4:	71 09       	sbc	r23, r1
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	f3 cf       	rjmp	.-26     	; 0x890 <Endpoint_Write_Control_Stream_LE+0x60>
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	80 34       	cpi	r24, 0x40	; 64
     8ae:	91 05       	cpc	r25, r1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <Endpoint_Write_Control_Stream_LE+0x84>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8b8:	8e 77       	andi	r24, 0x7E	; 126
     8ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8be:	cb cf       	rjmp	.-106    	; 0x856 <Endpoint_Write_Control_Stream_LE+0x26>
     8c0:	21 11       	cpse	r18, r1
     8c2:	cc cf       	rjmp	.-104    	; 0x85c <Endpoint_Write_Control_Stream_LE+0x2c>
     8c4:	0a c0       	rjmp	.+20     	; 0x8da <Endpoint_Write_Control_Stream_LE+0xaa>
     8c6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>
     8ca:	88 23       	and	r24, r24
     8cc:	61 f0       	breq	.+24     	; 0x8e6 <Endpoint_Write_Control_Stream_LE+0xb6>
     8ce:	85 30       	cpi	r24, 0x05	; 5
     8d0:	61 f0       	breq	.+24     	; 0x8ea <Endpoint_Write_Control_Stream_LE+0xba>
     8d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8d6:	83 fd       	sbrc	r24, 3
     8d8:	0a c0       	rjmp	.+20     	; 0x8ee <Endpoint_Write_Control_Stream_LE+0xbe>
     8da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8de:	82 ff       	sbrs	r24, 2
     8e0:	f2 cf       	rjmp	.-28     	; 0x8c6 <Endpoint_Write_Control_Stream_LE+0x96>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	08 95       	ret
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	08 95       	ret
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	08 95       	ret
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	08 95       	ret

000008f2 <Endpoint_Read_Control_Stream_LE>:
     8f2:	61 15       	cp	r22, r1
     8f4:	71 05       	cpc	r23, r1
     8f6:	29 f4       	brne	.+10     	; 0x902 <Endpoint_Read_Control_Stream_LE+0x10>
     8f8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8fc:	2b 77       	andi	r18, 0x7B	; 123
     8fe:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     902:	fc 01       	movw	r30, r24
     904:	61 15       	cp	r22, r1
     906:	71 05       	cpc	r23, r1
     908:	41 f1       	breq	.+80     	; 0x95a <Endpoint_Read_Control_Stream_LE+0x68>
     90a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>
     90e:	88 23       	and	r24, r24
     910:	61 f1       	breq	.+88     	; 0x96a <Endpoint_Read_Control_Stream_LE+0x78>
     912:	85 30       	cpi	r24, 0x05	; 5
     914:	61 f1       	breq	.+88     	; 0x96e <Endpoint_Read_Control_Stream_LE+0x7c>
     916:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     91a:	83 fd       	sbrc	r24, 3
     91c:	24 c0       	rjmp	.+72     	; 0x966 <Endpoint_Read_Control_Stream_LE+0x74>
     91e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     922:	82 ff       	sbrs	r24, 2
     924:	ef cf       	rjmp	.-34     	; 0x904 <Endpoint_Read_Control_Stream_LE+0x12>
     926:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     92a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	92 2b       	or	r25, r18
     932:	89 2b       	or	r24, r25
     934:	31 f0       	breq	.+12     	; 0x942 <Endpoint_Read_Control_Stream_LE+0x50>
     936:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     93a:	81 93       	st	Z+, r24
     93c:	61 50       	subi	r22, 0x01	; 1
     93e:	71 09       	sbc	r23, r1
     940:	91 f7       	brne	.-28     	; 0x926 <Endpoint_Read_Control_Stream_LE+0x34>
     942:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     946:	8b 77       	andi	r24, 0x7B	; 123
     948:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     94c:	db cf       	rjmp	.-74     	; 0x904 <Endpoint_Read_Control_Stream_LE+0x12>
     94e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>
     952:	88 23       	and	r24, r24
     954:	51 f0       	breq	.+20     	; 0x96a <Endpoint_Read_Control_Stream_LE+0x78>
     956:	85 30       	cpi	r24, 0x05	; 5
     958:	51 f0       	breq	.+20     	; 0x96e <Endpoint_Read_Control_Stream_LE+0x7c>
     95a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     95e:	80 ff       	sbrs	r24, 0
     960:	f6 cf       	rjmp	.-20     	; 0x94e <Endpoint_Read_Control_Stream_LE+0x5c>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	08 95       	ret
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	08 95       	ret
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	08 95       	ret
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	08 95       	ret

00000972 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     972:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <USB_ControlRequest+0x6>
     976:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <USB_ControlRequest+0x7>
     97a:	26 17       	cp	r18, r22
     97c:	37 07       	cpc	r19, r23
     97e:	48 f0       	brcs	.+18     	; 0x992 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     980:	61 15       	cp	r22, r1
     982:	71 05       	cpc	r23, r1
     984:	39 f4       	brne	.+14     	; 0x994 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     986:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     98a:	2e 77       	andi	r18, 0x7E	; 126
     98c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     990:	01 c0       	rjmp	.+2      	; 0x994 <Endpoint_Write_Control_PStream_LE+0x22>
     992:	b9 01       	movw	r22, r18
     994:	fc 01       	movw	r30, r24
     996:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     998:	61 15       	cp	r22, r1
     99a:	71 05       	cpc	r23, r1
     99c:	99 f1       	breq	.+102    	; 0xa04 <Endpoint_Write_Control_PStream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     99e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9a2:	88 23       	and	r24, r24
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <Endpoint_Write_Control_PStream_LE+0x36>
     9a6:	41 c0       	rjmp	.+130    	; 0xa2a <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9a8:	85 30       	cpi	r24, 0x05	; 5
     9aa:	09 f4       	brne	.+2      	; 0x9ae <Endpoint_Write_Control_PStream_LE+0x3c>
     9ac:	40 c0       	rjmp	.+128    	; 0xa2e <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9b2:	83 fd       	sbrc	r24, 3
     9b4:	3e c0       	rjmp	.+124    	; 0xa32 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     9ba:	82 fd       	sbrc	r24, 2
     9bc:	30 c0       	rjmp	.+96     	; 0xa1e <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
     9c2:	80 ff       	sbrs	r24, 0
     9c4:	e9 cf       	rjmp	.-46     	; 0x998 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     9c6:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     9ca:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	92 2b       	or	r25, r18
		{
		  uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9d2:	61 15       	cp	r22, r1
     9d4:	71 05       	cpc	r23, r1
     9d6:	59 f0       	breq	.+22     	; 0x9ee <Endpoint_Write_Control_PStream_LE+0x7c>
     9d8:	80 34       	cpi	r24, 0x40	; 64
     9da:	91 05       	cpc	r25, r1
     9dc:	40 f4       	brcc	.+16     	; 0x9ee <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     9de:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9e0:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     9e4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     9e6:	61 50       	subi	r22, 0x01	; 1
     9e8:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	f2 cf       	rjmp	.-28     	; 0x9d2 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	80 34       	cpi	r24, 0x40	; 64
     9f2:	91 05       	cpc	r25, r1
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <Endpoint_Write_Control_PStream_LE+0x86>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9fc:	8e 77       	andi	r24, 0x7E	; 126
     9fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a02:	ca cf       	rjmp	.-108    	; 0x998 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a04:	21 11       	cpse	r18, r1
     a06:	cb cf       	rjmp	.-106    	; 0x99e <Endpoint_Write_Control_PStream_LE+0x2c>
     a08:	0a c0       	rjmp	.+20     	; 0xa1e <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
	  uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a0a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a0e:	88 23       	and	r24, r24
     a10:	61 f0       	breq	.+24     	; 0xa2a <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a12:	85 30       	cpi	r24, 0x05	; 5
     a14:	61 f0       	breq	.+24     	; 0xa2e <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a1a:	83 fd       	sbrc	r24, 3
     a1c:	0a c0       	rjmp	.+20     	; 0xa32 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a22:	82 ff       	sbrs	r24, 2
     a24:	f2 cf       	rjmp	.-28     	; 0xa0a <Endpoint_Write_Control_PStream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a32:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a34:	08 95       	ret

00000a36 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     a36:	98 2f       	mov	r25, r24
     a38:	97 30       	cpi	r25, 0x07	; 7
     a3a:	68 f5       	brcc	.+90     	; 0xa96 <Endpoint_ConfigureEndpoint_Prv+0x60>
     a3c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a40:	98 17       	cp	r25, r24
     a42:	39 f0       	breq	.+14     	; 0xa52 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     a44:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     a48:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     a4c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <Endpoint_ConfigureEndpoint_Prv+0x22>
     a52:	24 2f       	mov	r18, r20
     a54:	76 2f       	mov	r23, r22
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	21 fd       	sbrc	r18, 1
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     a5c:	9f 5f       	subi	r25, 0xFF	; 255
     a5e:	ec cf       	rjmp	.-40     	; 0xa38 <Endpoint_ConfigureEndpoint_Prv+0x2>
     a60:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a64:	3e 7f       	andi	r19, 0xFE	; 254
     a66:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a6a:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     a6e:	3d 7f       	andi	r19, 0xFD	; 253
     a70:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     a74:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a78:	31 60       	ori	r19, 0x01	; 1
     a7a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a7e:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     a82:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     a86:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     a8a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     a8e:	27 fd       	sbrc	r18, 7
     a90:	e5 cf       	rjmp	.-54     	; 0xa5c <Endpoint_ConfigureEndpoint_Prv+0x26>
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	08 95       	ret
     a96:	8f 70       	andi	r24, 0x0F	; 15
     a98:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	08 95       	ret

00000aa0 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     aa0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <USB_ControlRequest>
     aa4:	87 ff       	sbrs	r24, 7
     aa6:	11 c0       	rjmp	.+34     	; 0xaca <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     aa8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     aac:	82 fd       	sbrc	r24, 2
     aae:	05 c0       	rjmp	.+10     	; 0xaba <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ab0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>
     ab4:	81 11       	cpse	r24, r1
     ab6:	f8 cf       	rjmp	.-16     	; 0xaa8 <Endpoint_ClearStatusStage+0x8>
     ab8:	11 c0       	rjmp	.+34     	; 0xadc <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     aba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     abe:	8b 77       	andi	r24, 0x7B	; 123
     ac0:	0b c0       	rjmp	.+22     	; 0xad8 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ac2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>
     ac6:	88 23       	and	r24, r24
     ac8:	49 f0       	breq	.+18     	; 0xadc <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     aca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     ace:	80 ff       	sbrs	r24, 0
     ad0:	f8 cf       	rjmp	.-16     	; 0xac2 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ad2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ad6:	8e 77       	andi	r24, 0x7E	; 126
     ad8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     adc:	08 95       	ret

00000ade <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     ade:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     ae2:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     ae6:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     ae8:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     aec:	84 2f       	mov	r24, r20
     aee:	81 70       	andi	r24, 0x01	; 1
     af0:	40 ff       	sbrs	r20, 0
     af2:	23 c0       	rjmp	.+70     	; 0xb3a <__stack+0x3b>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     af4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     af8:	80 fd       	sbrc	r24, 0
     afa:	1d c0       	rjmp	.+58     	; 0xb36 <__stack+0x37>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     afc:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b00:	88 23       	and	r24, r24
     b02:	99 f0       	breq	.+38     	; 0xb2a <__stack+0x2b>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b04:	85 30       	cpi	r24, 0x05	; 5
     b06:	99 f0       	breq	.+38     	; 0xb2e <__stack+0x2f>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b08:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b0c:	85 fd       	sbrc	r24, 5
     b0e:	11 c0       	rjmp	.+34     	; 0xb32 <__stack+0x33>
     b10:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     b14:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b18:	24 17       	cp	r18, r20
     b1a:	35 07       	cpc	r19, r21
     b1c:	29 f3       	breq	.-54     	; 0xae8 <Endpoint_WaitUntilReady+0xa>
     b1e:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b20:	11 f0       	breq	.+4      	; 0xb26 <__stack+0x27>
     b22:	9a 01       	movw	r18, r20
     b24:	e1 cf       	rjmp	.-62     	; 0xae8 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b3a:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     b3e:	42 ff       	sbrs	r20, 2
     b40:	dd cf       	rjmp	.-70     	; 0xafc <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     b42:	08 95       	ret

00000b44 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b4c:	4b d0       	rcall	.+150    	; 0xbe4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b4e:	52 d0       	rcall	.+164    	; 0xbf4 <USB_INT_ClearAllInterrupts>
     b50:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b52:	d0 e0       	ldi	r29, 0x00	; 0
     b54:	88 81       	ld	r24, Y
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	88 83       	st	Y, r24
     b5a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     b5c:	80 68       	ori	r24, 0x80	; 128
     b5e:	88 83       	st	Y, r24
     b60:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b62:	8f 7d       	andi	r24, 0xDF	; 223
     b64:	88 83       	st	Y, r24
     b66:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b68:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     b6c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     b70:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     b74:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     b78:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	f8 01       	movw	r30, r16
     b7e:	80 81       	ld	r24, Z
     b80:	8b 7f       	andi	r24, 0xFB	; 251
     b82:	80 83       	st	Z, r24
     b84:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     b86:	81 60       	ori	r24, 0x01	; 1
     b88:	88 83       	st	Y, r24
     b8a:	42 e3       	ldi	r20, 0x32	; 50
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	52 df       	rcall	.-348    	; 0xa36 <Endpoint_ConfigureEndpoint_Prv>
     b92:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	80 83       	st	Z, r24
     b9c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	80 83       	st	Z, r24
     ba6:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     ba8:	88 60       	ori	r24, 0x08	; 8
     baa:	80 83       	st	Z, r24
     bac:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     bae:	80 81       	ld	r24, Z
     bb0:	8e 7f       	andi	r24, 0xFE	; 254
     bb2:	80 83       	st	Z, r24
     bb4:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     bb6:	80 61       	ori	r24, 0x10	; 16
     bb8:	88 83       	st	Y, r24
     bba:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	08 95       	ret

00000bc4 <USB_Init>:
     bc4:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 7e       	andi	r24, 0xEF	; 239
     bcc:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     bce:	e7 ed       	ldi	r30, 0xD7	; 215
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	81 60       	ori	r24, 0x01	; 1
     bd6:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     bd8:	84 e0       	ldi	r24, 0x04	; 4
     bda:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <USB_IsInitialized>

	USB_ResetInterface();
     be2:	b0 cf       	rjmp	.-160    	; 0xb44 <USB_ResetInterface>

00000be4 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     be4:	e8 ed       	ldi	r30, 0xD8	; 216
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8e 7f       	andi	r24, 0xFE	; 254
     bec:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     bee:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     bf2:	08 95       	ret

00000bf4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bf4:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     bf8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     bfc:	08 95       	ret

00000bfe <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	2f 93       	push	r18
     c0a:	3f 93       	push	r19
     c0c:	4f 93       	push	r20
     c0e:	5f 93       	push	r21
     c10:	6f 93       	push	r22
     c12:	7f 93       	push	r23
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     c20:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     c24:	82 ff       	sbrs	r24, 2
     c26:	0a c0       	rjmp	.+20     	; 0xc3c <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     c28:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c2c:	82 ff       	sbrs	r24, 2
     c2e:	06 c0       	rjmp	.+12     	; 0xc3c <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     c30:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     c34:	8b 7f       	andi	r24, 0xFB	; 251
     c36:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     c3a:	f4 d1       	rcall	.+1000   	; 0x1024 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     c3c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     c40:	80 ff       	sbrs	r24, 0
     c42:	1d c0       	rjmp	.+58     	; 0xc7e <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     c44:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c48:	80 ff       	sbrs	r24, 0
     c4a:	19 c0       	rjmp	.+50     	; 0xc7e <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     c4c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     c50:	8e 7f       	andi	r24, 0xFE	; 254
     c52:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     c56:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     c5a:	80 ff       	sbrs	r24, 0
     c5c:	0c c0       	rjmp	.+24     	; 0xc76 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c5e:	80 e1       	ldi	r24, 0x10	; 16
     c60:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c62:	82 e1       	ldi	r24, 0x12	; 18
     c64:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     c66:	09 b4       	in	r0, 0x29	; 41
     c68:	00 fe       	sbrs	r0, 0
     c6a:	fd cf       	rjmp	.-6      	; 0xc66 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     c72:	17 dc       	rcall	.-2002   	; 0x4a2 <EVENT_USB_Device_Connect>
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c76:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     c78:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     c7c:	13 dc       	rcall	.-2010   	; 0x4a4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     c7e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     c82:	80 ff       	sbrs	r24, 0
     c84:	18 c0       	rjmp	.+48     	; 0xcb6 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     c86:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c8a:	80 ff       	sbrs	r24, 0
     c8c:	14 c0       	rjmp	.+40     	; 0xcb6 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c8e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c92:	8e 7f       	andi	r24, 0xFE	; 254
     c94:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c98:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c9c:	80 61       	ori	r24, 0x10	; 16
     c9e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     ca2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ca6:	80 62       	ori	r24, 0x20	; 32
     ca8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cac:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     cae:	85 e0       	ldi	r24, 0x05	; 5
     cb0:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     cb4:	b7 d1       	rcall	.+878    	; 0x1024 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     cb6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     cba:	84 ff       	sbrs	r24, 4
     cbc:	2f c0       	rjmp	.+94     	; 0xd1c <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     cbe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     cc2:	84 ff       	sbrs	r24, 4
     cc4:	2b c0       	rjmp	.+86     	; 0xd1c <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cc6:	80 e1       	ldi	r24, 0x10	; 16
     cc8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cca:	82 e1       	ldi	r24, 0x12	; 18
     ccc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     cce:	09 b4       	in	r0, 0x29	; 41
     cd0:	00 fe       	sbrs	r0, 0
     cd2:	fd cf       	rjmp	.-6      	; 0xcce <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cd4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     cd8:	8f 7d       	andi	r24, 0xDF	; 223
     cda:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     cde:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     ce2:	8f 7e       	andi	r24, 0xEF	; 239
     ce4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     ce8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     cec:	8f 7e       	andi	r24, 0xEF	; 239
     cee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     cf2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     cf6:	81 60       	ori	r24, 0x01	; 1
     cf8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     cfc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_Device_ConfigurationNumber>
     d00:	88 23       	and	r24, r24
     d02:	11 f0       	breq	.+4      	; 0xd08 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d08:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     d0c:	87 fd       	sbrc	r24, 7
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <__vector_10+0x116>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <__vector_10+0x118>
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     d1a:	84 d1       	rcall	.+776    	; 0x1024 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     d1c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     d20:	83 ff       	sbrs	r24, 3
     d22:	22 c0       	rjmp	.+68     	; 0xd68 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     d24:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d28:	83 ff       	sbrs	r24, 3
     d2a:	1e c0       	rjmp	.+60     	; 0xd68 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     d2c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     d30:	87 7f       	andi	r24, 0xF7	; 247
     d32:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     d3c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     d40:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     d44:	8e 7f       	andi	r24, 0xFE	; 254
     d46:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d4e:	8e 7f       	andi	r24, 0xFE	; 254
     d50:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d54:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d58:	80 61       	ori	r24, 0x10	; 16
     d5a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     d5e:	42 e3       	ldi	r20, 0x32	; 50
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	68 de       	rcall	.-816    	; 0xa36 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     d66:	5e d1       	rcall	.+700    	; 0x1024 <USB_Event_Stub>
     d68:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d6a:	ef 91       	pop	r30
     d6c:	bf 91       	pop	r27
     d6e:	af 91       	pop	r26
     d70:	9f 91       	pop	r25
     d72:	8f 91       	pop	r24
     d74:	7f 91       	pop	r23
     d76:	6f 91       	pop	r22
     d78:	5f 91       	pop	r21
     d7a:	4f 91       	pop	r20
     d7c:	3f 91       	pop	r19
     d7e:	2f 91       	pop	r18
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	0f 90       	pop	r0
     d86:	1f 90       	pop	r1
     d88:	18 95       	reti

00000d8a <USB_Device_ProcessControlRequest>:
     d8a:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	aa 97       	sbiw	r28, 0x2a	; 42
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	e1 e1       	ldi	r30, 0x11	; 17
     da2:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     da4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     da8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     daa:	22 e0       	ldi	r18, 0x02	; 2
     dac:	e9 31       	cpi	r30, 0x19	; 25
     dae:	f2 07       	cpc	r31, r18
     db0:	c9 f7       	brne	.-14     	; 0xda4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     db2:	81 db       	rcall	.-2302   	; 0x4b6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     db4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     db8:	83 ff       	sbrs	r24, 3
     dba:	1c c1       	rjmp	.+568    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     dbc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     dc0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <USB_ControlRequest+0x1>
     dc4:	49 2f       	mov	r20, r25
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	4a 30       	cpi	r20, 0x0A	; 10
     dca:	51 05       	cpc	r21, r1
     dcc:	08 f0       	brcs	.+2      	; 0xdd0 <USB_Device_ProcessControlRequest+0x46>
     dce:	12 c1       	rjmp	.+548    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
     dd0:	fa 01       	movw	r30, r20
     dd2:	ea 5a       	subi	r30, 0xAA	; 170
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	51 c1       	rjmp	.+674    	; 0x107a <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     dd8:	80 38       	cpi	r24, 0x80	; 128
     dda:	81 f0       	breq	.+32     	; 0xdfc <USB_Device_ProcessControlRequest+0x72>
     ddc:	82 38       	cpi	r24, 0x82	; 130
     dde:	09 f0       	breq	.+2      	; 0xde2 <USB_Device_ProcessControlRequest+0x58>
     de0:	09 c1       	rjmp	.+530    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     de2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <USB_ControlRequest+0x4>
     de6:	8f 70       	andi	r24, 0x0F	; 15
     de8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     dec:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     df0:	85 fb       	bst	r24, 5
     df2:	88 27       	eor	r24, r24
     df4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     df6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     dfc:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     e00:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <USB_Device_RemoteWakeupEnabled>
     e04:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     e06:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e08:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e0c:	97 7f       	andi	r25, 0xF7	; 247
     e0e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     e12:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     e16:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     e1a:	c4 c0       	rjmp	.+392    	; 0xfa4 <USB_Device_ProcessControlRequest+0x21a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e1c:	28 2f       	mov	r18, r24
     e1e:	2d 7f       	andi	r18, 0xFD	; 253
     e20:	09 f0       	breq	.+2      	; 0xe24 <USB_Device_ProcessControlRequest+0x9a>
     e22:	e8 c0       	rjmp	.+464    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     e24:	88 23       	and	r24, r24
     e26:	19 f0       	breq	.+6      	; 0xe2e <USB_Device_ProcessControlRequest+0xa4>
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	61 f0       	breq	.+24     	; 0xe44 <USB_Device_ProcessControlRequest+0xba>
     e2c:	e3 c0       	rjmp	.+454    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     e2e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <USB_ControlRequest+0x2>
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	09 f0       	breq	.+2      	; 0xe38 <USB_Device_ProcessControlRequest+0xae>
     e36:	de c0       	rjmp	.+444    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     e38:	93 30       	cpi	r25, 0x03	; 3
     e3a:	09 f0       	breq	.+2      	; 0xe3e <USB_Device_ProcessControlRequest+0xb4>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <USB_Device_RemoteWakeupEnabled>
     e42:	2b c0       	rjmp	.+86     	; 0xe9a <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     e44:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <USB_ControlRequest+0x2>
     e48:	81 11       	cpse	r24, r1
     e4a:	27 c0       	rjmp	.+78     	; 0xe9a <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e4c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <USB_ControlRequest+0x4>
     e50:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     e52:	09 f4       	brne	.+2      	; 0xe56 <USB_Device_ProcessControlRequest+0xcc>
     e54:	cf c0       	rjmp	.+414    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e56:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e5a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     e5e:	20 ff       	sbrs	r18, 0
     e60:	1c c0       	rjmp	.+56     	; 0xe9a <USB_Device_ProcessControlRequest+0x110>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     e62:	93 30       	cpi	r25, 0x03	; 3
     e64:	21 f4       	brne	.+8      	; 0xe6e <USB_Device_ProcessControlRequest+0xe4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e66:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     e6a:	80 62       	ori	r24, 0x20	; 32
     e6c:	14 c0       	rjmp	.+40     	; 0xe96 <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     e6e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     e72:	90 61       	ori	r25, 0x10	; 16
     e74:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	a9 01       	movw	r20, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <USB_Device_ProcessControlRequest+0xfa>
     e80:	44 0f       	add	r20, r20
     e82:	55 1f       	adc	r21, r21
     e84:	8a 95       	dec	r24
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <USB_Device_ProcessControlRequest+0xf6>
     e88:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     e8c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     e90:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     e94:	88 60       	ori	r24, 0x08	; 8
     e96:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e9a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ea2:	87 7f       	andi	r24, 0xF7	; 247
     ea4:	82 c0       	rjmp	.+260    	; 0xfaa <USB_Device_ProcessControlRequest+0x220>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ea6:	81 11       	cpse	r24, r1
     ea8:	a5 c0       	rjmp	.+330    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     eaa:	10 91 13 02 	lds	r17, 0x0213	; 0x800213 <USB_ControlRequest+0x2>
     eae:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     eb0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     eb4:	80 78       	andi	r24, 0x80	; 128
     eb6:	81 2b       	or	r24, r17
     eb8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     ebc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ec0:	87 7f       	andi	r24, 0xF7	; 247
     ec2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ec6:	ec dd       	rcall	.-1064   	; 0xaa0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ec8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
     ecc:	80 ff       	sbrs	r24, 0
     ece:	fc cf       	rjmp	.-8      	; 0xec8 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     ed0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     ed4:	80 68       	ori	r24, 0x80	; 128
     ed6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     eda:	11 11       	cpse	r17, r1
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <USB_Device_ProcessControlRequest+0x158>
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <USB_Device_ProcessControlRequest+0x15a>
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <USB_DeviceState>
     ee8:	85 c0       	rjmp	.+266    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     eea:	80 58       	subi	r24, 0x80	; 128
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	08 f0       	brcs	.+2      	; 0xef2 <USB_Device_ProcessControlRequest+0x168>
     ef0:	81 c0       	rjmp	.+258    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ef2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <USB_ControlRequest+0x2>
     ef6:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <USB_ControlRequest+0x3>
     efa:	8c 3d       	cpi	r24, 0xDC	; 220
     efc:	53 e0       	ldi	r21, 0x03	; 3
     efe:	95 07       	cpc	r25, r21
     f00:	71 f5       	brne	.+92     	; 0xf5e <USB_Device_ProcessControlRequest+0x1d4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     f06:	8a e2       	ldi	r24, 0x2A	; 42
     f08:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f0a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f0c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     f0e:	de 01       	movw	r26, r28
     f10:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f12:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     f14:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     f16:	51 e2       	ldi	r21, 0x21	; 33
     f18:	e3 2f       	mov	r30, r19
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     f20:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     f22:	20 ff       	sbrs	r18, 0
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
     f26:	e2 95       	swap	r30
     f28:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     f2a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     f2c:	ef 70       	andi	r30, 0x0F	; 15
     f2e:	8e 2f       	mov	r24, r30
     f30:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     f32:	ea 30       	cpi	r30, 0x0A	; 10
     f34:	10 f0       	brcs	.+4      	; 0xf3a <USB_Device_ProcessControlRequest+0x1b0>
     f36:	c7 96       	adiw	r24, 0x37	; 55
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <USB_Device_ProcessControlRequest+0x1b2>
     f3a:	c0 96       	adiw	r24, 0x30	; 48
     f3c:	8d 93       	st	X+, r24
     f3e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f40:	2f 5f       	subi	r18, 0xFF	; 255
     f42:	24 31       	cpi	r18, 0x14	; 20
     f44:	49 f7       	brne	.-46     	; 0xf18 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f46:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f4c:	87 7f       	andi	r24, 0xF7	; 247
     f4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     f52:	6a e2       	ldi	r22, 0x2A	; 42
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	6a dc       	rcall	.-1836   	; 0x830 <Endpoint_Write_Control_Stream_LE>
     f5c:	12 c0       	rjmp	.+36     	; 0xf82 <USB_Device_ProcessControlRequest+0x1f8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     f5e:	ae 01       	movw	r20, r28
     f60:	4f 5f       	subi	r20, 0xFF	; 255
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <USB_ControlRequest+0x4>
     f68:	8e db       	rcall	.-2276   	; 0x686 <CALLBACK_USB_GetDescriptor>
     f6a:	bc 01       	movw	r22, r24
     f6c:	89 2b       	or	r24, r25
     f6e:	09 f4       	brne	.+2      	; 0xf72 <USB_Device_ProcessControlRequest+0x1e8>
     f70:	41 c0       	rjmp	.+130    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
     f72:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f76:	97 7f       	andi	r25, 0xF7	; 247
     f78:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	f8 dc       	rcall	.-1552   	; 0x972 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f86:	8b 77       	andi	r24, 0x7B	; 123
     f88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f8c:	33 c0       	rjmp	.+102    	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     f8e:	80 38       	cpi	r24, 0x80	; 128
     f90:	89 f5       	brne	.+98     	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f96:	87 7f       	andi	r24, 0xF7	; 247
     f98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     f9c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fa0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fa4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fa8:	8e 77       	andi	r24, 0x7E	; 126
     faa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     fae:	78 dd       	rcall	.-1296   	; 0xaa0 <Endpoint_ClearStatusStage>
     fb0:	21 c0       	rjmp	.+66     	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     fb2:	81 11       	cpse	r24, r1
     fb4:	1f c0       	rjmp	.+62     	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     fb6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <USB_ControlRequest+0x2>
     fba:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <USB_ControlRequest+0x3>
     fbe:	99 27       	eor	r25, r25
     fc0:	02 97       	sbiw	r24, 0x02	; 2
     fc2:	c4 f4       	brge	.+48     	; 0xff4 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     fce:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <USB_ControlRequest+0x2>
     fd2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     fd6:	64 dd       	rcall	.-1336   	; 0xaa0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     fd8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <USB_Device_ConfigurationNumber>
     fdc:	81 11       	cpse	r24, r1
     fde:	06 c0       	rjmp	.+12     	; 0xfec <USB_Device_ProcessControlRequest+0x262>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     fe0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     fe4:	87 fd       	sbrc	r24, 7
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <USB_Device_ProcessControlRequest+0x262>
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	01 c0       	rjmp	.+2      	; 0xfee <USB_Device_ProcessControlRequest+0x264>
     fec:	84 e0       	ldi	r24, 0x04	; 4
     fee:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     ff2:	59 da       	rcall	.-2894   	; 0x4a6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ff4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     ff8:	83 ff       	sbrs	r24, 3
     ffa:	0a c0       	rjmp	.+20     	; 0x1010 <USB_Device_ProcessControlRequest+0x286>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ffc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1000:	87 7f       	andi	r24, 0xF7	; 247
    1002:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1006:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    100a:	80 62       	ori	r24, 0x20	; 32
    100c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1010:	aa 96       	adiw	r28, 0x2a	; 42
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	08 95       	ret

00001024 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1024:	08 95       	ret

00001026 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1026:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1028:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <USB_DeviceState>
    102c:	88 23       	and	r24, r24
    102e:	99 f0       	breq	.+38     	; 0x1056 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1030:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1034:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1036:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    103a:	89 2f       	mov	r24, r25
    103c:	81 70       	andi	r24, 0x01	; 1
    103e:	90 fd       	sbrc	r25, 0
    1040:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1042:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1044:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1048:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    104c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    104e:	9d de       	rcall	.-710    	; 0xd8a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1050:	cf 70       	andi	r28, 0x0F	; 15
    1052:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <Serial_SendData>:
	}
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
    105a:	68 0f       	add	r22, r24
    105c:	79 1f       	adc	r23, r25
	while (Length--)
    105e:	86 17       	cp	r24, r22
    1060:	97 07       	cpc	r25, r23
    1062:	51 f0       	breq	.+20     	; 0x1078 <Serial_SendData+0x1e>
	  Serial_SendByte(*((uint8_t*)Buffer++));
    1064:	fc 01       	movw	r30, r24
    1066:	21 91       	ld	r18, Z+
    1068:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    106a:	30 91 c8 00 	lds	r19, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    106e:	35 ff       	sbrs	r19, 5
    1070:	fc cf       	rjmp	.-8      	; 0x106a <Serial_SendData+0x10>
				UDR1 = DataByte;
    1072:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1076:	f3 cf       	rjmp	.-26     	; 0x105e <Serial_SendData+0x4>
}
    1078:	08 95       	ret

0000107a <__tablejump2__>:
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	05 90       	lpm	r0, Z+
    1080:	f4 91       	lpm	r31, Z
    1082:	e0 2d       	mov	r30, r0
    1084:	09 94       	ijmp

00001086 <memcpy_P>:
    1086:	fb 01       	movw	r30, r22
    1088:	dc 01       	movw	r26, r24
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <memcpy_P+0xa>
    108c:	05 90       	lpm	r0, Z+
    108e:	0d 92       	st	X+, r0
    1090:	41 50       	subi	r20, 0x01	; 1
    1092:	50 40       	sbci	r21, 0x00	; 0
    1094:	d8 f7       	brcc	.-10     	; 0x108c <memcpy_P+0x6>
    1096:	08 95       	ret

00001098 <_exit>:
    1098:	f8 94       	cli

0000109a <__stop_program>:
    109a:	ff cf       	rjmp	.-2      	; 0x109a <__stop_program>
